@using Blazor_Server.Data
@using System.ComponentModel
@using System.Reflection

<h3>Project List</h3>

@if(this.columns is null)
{
    <pre>Loading ...</pre>
}
else
{
<div>
    <div>
        <label>
            Filter
            <input id="filter" bind="@Filter" class="input-group-text p-2 mb-lg-3" type="text" placeholder="Filter the data here" />
        </label>
        <button class="btn btn-primary" @onclick="FilterUpdate">Filter</button>
    </div>
    
    <table class="table rounded">
        <thead>
            @((MarkupString)GetHeader())
        </thead>
        <tbody>
            @((MarkupString)TableHtmlBody)
        </tbody>
    </table>
</div>
}


@code {

    public event EventHandler<TableDataChangedEventArgs> DataChanged;

    private List<string> columns;

    private IEnumerable<object> tableData;

    private string TableHtmlBody { get; set; } = string.Empty;

    private string Filter { get; set; } = string.Empty;

    [Parameter]
    public IEnumerable<object> Data
    {
        get
        {
            return tableData;
        }
        set
        {
            if (value is IEnumerable<object>)
            {
                tableData = value as IEnumerable<object>;
                DataChanged?.Invoke(this, new TableDataChangedEventArgs(tableData));
            }
        }
    }

    [Parameter]
    public long RecordsPerPage { get; set; } = 10;

    protected override void OnInitialized()
    {
        this.DataChanged += OnDataChanged;

        if (columns is null)
        {
            this.columns = GetColumnNames();
        }

        this.TableHtmlBody = GetBody();
    }

    private string GetHeader()
    {
        string html = string.Empty;

        html += "<tr>";

        foreach (var columnName in columns)
        {
            html += $"<th>{columnName}</th>";
        }

        html += "<th>Actions</th>";

        html += "</tr>";

        return html;
    }

    private string GetBody()
    {
        return GetBody(string.Empty);
    }

    private string GetBody(string filter)
    {
        string html = string.Empty;

        foreach (var row in tableData)
        {
            int i = 0;
            html += "<tr>";

            foreach (var columnName in columns)
            {
                var prop = row.GetType().GetRuntimeProperties().FirstOrDefault(p => p.GetCustomAttribute(typeof(DisplayNameAttribute)) != null && p.GetCustomAttribute<DisplayNameAttribute>().DisplayName == columnName);

                if (prop is null)
                {
                    continue;
                }
                else
                {
                    var isOddClass = i % 2 != 0 ? "odd" : string.Empty;

                    var value = prop.GetValue(row);

                    if (Uri.TryCreate(value as string, UriKind.Absolute, out Uri result))
                    {
                        html += $"<td class=\"{isOddClass}\"><a href=\"{value}\" target=\"_blank\">{value}</a></td>";
                    }
                    else
                    {
                        html += $"<td class=\"{isOddClass}\">{value}</td>";
                    }
                }
            }

            html += "</tr>";
            i++;
        }

        return html;
    }

    private List<string> GetColumnNames()
    {
        List<string> columns = new List<string>();

        if (this.tableData.Count() < 1)
        {
            columns.Add("No Data");
            return columns;
        }

        foreach (var prop in this.tableData.First().GetType().GetRuntimeProperties())
        {
            var attribute = prop.GetCustomAttribute<ColumnHeaderAttribute>();
            if (attribute is null)
            {
                continue;
            }

            if (attribute.ColumnHeader)
            {
                string displayName = prop.GetCustomAttribute<DisplayNameAttribute>()?.DisplayName ?? prop.Name;
                columns.Add(displayName);
            }
        }

        return columns;
    }

    private void FilterUpdate(MouseEventArgs e)
    {
        TableHtmlBody = GetBody(Filter);
    }

    private void OnDataChanged(object o, TableDataChangedEventArgs e)
    {
        columns = GetColumnNames();
    }
}
