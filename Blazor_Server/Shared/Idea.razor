@using Blazor_Server.Data
@inject ProjectManagerService ProjectManager
@inject NavigationManager NavigationManager

<div class="p-5">
    <EditForm Model="@formModel" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <table class="table w-50 p-5">
            <tr class="row w-25">
                <td class="d-xl-table-cell">
                    <label>
                        First Name:
                        <InputText id="firstName" @bind-Value="formModel.FirstName" />
                    </label>
                </td>
            </tr>
            <tr class="row w-25">
                <td class="d-xl-table-cell">
                    <label>
                        Last Name:
                        <InputText id="lastName" @bind-Value="formModel.LastName" />
                    </label>
                </td>
            </tr>
            <tr class="row w-25">
                <td class="d-xl-table-cell">
                    <label>
                        Email:
                        <InputText id="email" @bind-Value="formModel.Email" />
                    </label>
                </td>
            </tr>
            <tr class="row w-25">
                <td class="d-xl-table-cell">
                    <label>
                        Phone:
                        <InputText id="phone" @bind-Value="formModel.Phone" />
                    </label>
                </td>
            </tr>
            <tr class="row w-25">
                <td class="d-xl-table-cell">
                    <label>
                        Project Title:
                        <InputText id="projectTitle" @bind-Value="formModel.ProjectTitle" />
                    </label>
                </td>
            </tr>
            <tr class="row w-25">
                <td class="d-xl-table-cell">
                    <label>
                        Project Description:
                        <InputTextArea id="projectDescription" @bind-Value="formModel.ProjectDescription" />
                    </label>
                </td>
            </tr>
            <tr class="row w-25">
                <td class="d-xl-table-cell">
                    <label>
                        Attachement:
                        <InputFile id="attachment" OnChange="LoadFiles" multiple />
                    </label>
                </td>
            </tr>
            <tr class="row w-25">
                <td class="d-xl-table-cell">
                    <label>
                        Website:
                        <InputText id="url" @bind-Value="formModel.Url" />
                    </label>
                </td>
            </tr>
            <tr class="row w-25">
                <td class="d-xl-table-cell">
                    <label>
                        Self Sponsored:
                        <InputCheckbox id="isSponsor" @bind-Value="formModel.IsSponsor" @onclick="SponsorCheckBox_Changed" />
                    </label>
                </td>
            </tr>
        </table>

        @if (!formModel.IsSponsor)
        {
            <h4>Sponsor Information...</h4>
            <table class="table w-50">
                <tr class="row w-25">
                    <td class="d-xl-table-cell">
                        <label>
                            Sponsor First Name:
                            <InputText id="firstName" @bind-Value="formModel.SponsorFirstName" />
                        </label>
                    </td>
                </tr>
                <tr class="row w-25">
                    <td class="d-xl-table-cell">
                        <label>
                            Sponsor Last Name:
                            <InputText id="lastName" @bind-Value="formModel.SponsorLastName" />
                        </label>
                    </td>
                </tr>
                <tr class="row w-25">
                    <td class="d-xl-table-cell">
                        <label>
                            Sponsor Email:
                            <InputText id="email" @bind-Value="formModel.SponsorEmail" />
                        </label>
                    </td>
                </tr>
                <tr class="row w-25">
                    <td class="d-xl-table-cell">
                        <label>
                            Sponsor Phone:
                            <InputText id="phone" @bind-Value="formModel.SponsorPhone" />
                        </label>
                    </td>
                </tr>
                <tr class="row w-25">
                    <td class="d-xl-table-cell">
                        <label>
                            Sponsor Website:
                            <InputText id="url" @bind-Value="formModel.SponsorUrl" />
                        </label>
                    </td>
                </tr>
            </table>
        }

        @if (this.ShowFileAttachments)
                {
                    <div>
                        <ul class="list-group">
                            @foreach (var file in this.formModel.Attachements)
                            {
                                <li class="list-group-item-info"><a @onclick="@(e => DownloadFile(file))">@file.Name</a></li>
                            }
                        </ul>
                    </div>
                }

        @if (this.ShowFormButton == FormButtons.Submit)
        {
            <button type="submit" @onclick="SponsorCheck" class="btn btn-primary">Submit</button> <button type="reset" class="btn btn-danger">Reset</button>
        }
        else if (this.ShowFormButton == FormButtons.Approver)
        {
            if (this.formModel.IsDirty)
            { <button type="button" @onclick="UpdateRecordAsync" class="btn btn-primary">Update</button> } <button type="button" class="btn btn-danger">Close</button>
        }

    </EditForm>
</div>


@code {

    public enum FormButtons
    {
        Submit = 0,
        Approver
    }

    public static bool IsUploading
    {
        get
        {
            return isUploading;
        }
    }

    [Parameter]
    public bool ShowFileAttachments { get; set; } = false;

    [Parameter]
    public bool ShowComments { get; set; } = false;

    [Parameter]
    public FormButtons ShowFormButton { get; set; } = FormButtons.Submit;

    [Parameter]
    public IIdea Parent { get; set; } = null;

    [Parameter]
    public IIdeaManager Manager { get; set; } = null;

    private IdeaFormModel formModel = new IdeaFormModel();

    private List<IProjectFile> loadedFiles = new();

    private long maxFileSize => ProjectManager.MaxFileSize;

    private int maxAllowedFiles = 4;

    private static bool isUploading = false;

    private bool isDirty => formModel.IsDirty;

    private async Task HandleValidSubmit()
    {
        formModel.Attachements = loadedFiles;
        var uploaded = await ProjectManager.AddAsync(formModel);

        if (uploaded)
        {
            loadedFiles.Clear();
        }

        formModel = new IdeaFormModel();
    }

    private void LoadFiles(InputFileChangeEventArgs inputFile)
    {
        this.loadedFiles.Clear();
        foreach (var file in inputFile.GetMultipleFiles().Take(maxAllowedFiles))
        {
            if (file.Size > maxFileSize)
            {
                continue;
            }

            var projectFile = new ProjectFile { BrowserFile = file };

            this.loadedFiles.Add(projectFile);
        }
    }

    private void SponsorCheckBox_Changed(EventArgs e)
    {
        this.formModel.IsSponsor = !this.formModel.IsSponsor;

        if (!this.formModel.IsSponsor)
        {
            ResetSponsor();
        }
    }

    /// <summary>
    /// Sponsor is required so if the project is self sponsored, fill in own information on submit.
    /// </summary>
    /// <param name="e"></param>
    private void SponsorCheck(EventArgs e)
    {
        if (formModel.IsSponsor)
        {
            formModel.SponsorFirstName = formModel.FirstName;
            formModel.SponsorLastName = formModel.LastName;
            formModel.SponsorEmail = formModel.Email;
            formModel.SponsorPhone = formModel.Phone;
            formModel.SponsorUrl = formModel.Url;
        }
    }

    private void ResetSponsor()
    {
        formModel.SponsorFirstName = string.Empty;
        formModel.SponsorLastName = string.Empty;
        formModel.SponsorEmail = string.Empty;
        formModel.SponsorPhone = string.Empty;
        formModel.SponsorUrl = string.Empty;
    }

    private async Task UpdateRecordAsync(EventArgs e)
    {
        if (Manager is null || !formModel.IsDirty)
        {
            return;
        }

        formModel.IsDirty = await Manager.UpdateAsync(formModel);
    }

    private void CloseForm(EventArgs e)
    {
        if (Parent is null)
        {
            return;
        }

        Parent.CloseIdea(this);
    }

    private void DownloadFile(IProjectFile file)
    {
        NavigationManager.NavigateTo($"/download/{file.Location}");
    }
}