
@if (IsDisabled(true))
{
    <button type="button" class="btn btn-secondary" disabled><span class="fas fa-arrow-left"></span></button>
}
else
{
    <button type="button" class="btn btn-secondary" @onclick="PageLeft"><span class="fas fa-arrow-left"></span></button>
}
&nbsp; @this.Parent.CurrentPage/@GetNumberOfPages() &nbsp;
@if (IsDisabled(false))
{
    <button type="button" class="btn btn-secondary" disabled><span class="fas fa-arrow-right"></span></button>
}
else
{
    <button type="button" class="btn btn-secondary" @onclick="PageRight"><span class="fas fa-arrow-right"></span></button>
}


@code {
    [Parameter] public EventCallback PageChanged { get; set; }
    [Parameter]
    public Table Parent { get; set; }

    private bool IsDisabled(bool isLeftArrow)
    {
        if (isLeftArrow)
        {
            return this.Parent.CurrentPage <= 1;
        }

        return this.Parent.CurrentPage >= GetNumberOfPages();
    }

    private int GetNumberOfPages()
    {
        int totalRows = string.IsNullOrEmpty(this.Parent.Filter) ? this.Parent.Count : this.Parent.GetRows().Count();
        var initialNumberOfPages = totalRows / this.Parent.RecordsPerPage;
        return initialNumberOfPages % 2 == 0 ? (int)initialNumberOfPages + 1 : (int)Math.Round((double)initialNumberOfPages, MidpointRounding.ToNegativeInfinity) + 1;
    }

    private void PageRight(MouseEventArgs e)
    {
        this.Parent.SetPageNumber(this.Parent.CurrentPage + 1);
        this.StateHasChanged();
        this.PageChanged.InvokeAsync();
    }

    private void PageLeft(MouseEventArgs e)
    {
        this.Parent.SetPageNumber(this.Parent.CurrentPage - 1);
        this.StateHasChanged();
        this.PageChanged.InvokeAsync();
    }
}
