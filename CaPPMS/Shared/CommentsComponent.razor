@using CaPPMS.Model
@using CaPPMS.Data
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using System.Diagnostics

@inject ProjectManagerService ProjectManager

<h3>Comments:</h3>

@if(Comments != null && Comments.Count() > 0)
{
    foreach(var comment in Comments)
    {
        <div class="card m-2 p-2">
            <div class="card-title p-2">
                Author:@comment.UserEmail
            </div>
            <div class="card-body">
                @comment.Comments
            </div>
            @if (this.isAuthenticated)
            {
                <div>
                    <button @onclick="e => DeleteComment(comment)"
                            class="btn btn-secondary">
                        Delete
                    </button>
                </div>
            }

        </div>
    }
}
else
{
    <p>
        <span class="p-2 fas fa-search"></span><span>No Comments Found</span>
    </p>
}

<div class="m-2 p-2 rounded">
    @if (this.isAuthenticated)
    {
        <EditForm OnValidSubmit="@HandleValidSubmit" Model="NewComment">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="card">
                <div class="card-title">
                    <span class="fas fa-comment"></span> Add Comment:
                </div>
                <div class="card-body" style="width:100%">
                    Comment:
                    <InputTextArea style="width:100%" @bind-Value="NewComment.Comments" /><br />
                    <button type="submit" class="btn btn-primary">Add Comment</button>
                </div>
            </div>
        </EditForm>
    }
    else
    {
        <EditForm OnValidSubmit="@HandleValidSubmit" Model="NewComment">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="card">
                <div class="card-title">
                    <span class="fas fa-comment"></span> Add Comment:
                </div>
                <div class="card-body" style="width:100%">
                    <table>
                        <tr>
                            <td style="padding-top:0px;">First Name:</td>
                            <td style="padding-top:0px;">Last Name:</td>
                            <td style="padding-top:0px;">Email:</td>
                            <td style="padding-top:0px;">Phone:</td>
                        </tr>
                        <tr>
                            <td style="padding-top:0px;"><InputText @bind-Value="NewContact.FirstName" /></td>
                            <td style="padding-top:0px;"><InputText @bind-Value="NewContact.LastName" /></td>
                            <td style="padding-top:0px;"><InputText @bind-Value="NewComment.UserEmail" /></td>
                            <td style="padding-top:0px;"><InputText @bind-Value="NewContact.Phone" /></td>

                        </tr>
                    </table>
                    Comment: 
                    <br />
                    <InputTextArea style="width:100%" @bind-Value="NewComment.Comments" /><br />
                    <button type="submit" class="btn btn-primary">Add Comment</button>
                </div>
            </div>
        </EditForm>
    }

</div>


@code {
    [Parameter]
    public Guid ProjectGuid { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private bool isAuthenticated;

    private Comment NewComment { get; set; }
    private Contact NewContact { get; set; }

    private ICommentManager CommentManager => ProjectManager;

    private IEnumerable<Comment> Comments;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        if (ProjectGuid == Guid.Empty)
        {
            throw new ArgumentNullException("Project GUID must be passed into component.");
        }

        ProjectManagerService.ProjectIdeasChanged += (o, e) =>
        {
            ShouldUpdateState();
        };
        var authState = await authenticationStateTask;
        this.isAuthenticated = authState.User?.Identity.IsAuthenticated ?? false;
        Comments = CommentManager.GetComments(ProjectGuid);
        NewComment = new Comment(ProjectGuid);
        NewContact = new Contact();
        if (this.isAuthenticated)
        {
            NewComment.UserEmail = authState.User?.Identity?.Name ?? "Unidentified User";
        }
    }

    private void ShouldUpdateState()
    {
        InvokeAsync(() =>
        {
            Comments = CommentManager.GetComments(ProjectGuid);
            this.StateHasChanged();
        });
    }

    private async Task HandleValidSubmit()
    {
        if (this.isAuthenticated)
        {
            var authState = await authenticationStateTask;
            NewComment.UserEmail = authState.User?.Identity?.Name ?? "Unidentified User";
        }

        NewComment.UpdateDateTime = DateTime.Now;
        CommentManager.AddComment(NewComment);

        NewComment = new Comment(ProjectGuid);
        NewContact = new Contact();
    }
    private void DeleteComment(Comment comment)
    {
        CommentManager.DeleteComment(comment);
    }
}
