@inject ProjectManagerService ProjectManager
@inject NavigationManager NavigationManager
@inject IMailService MailService
@inject IJSRuntime JSRuntime

<style>
    .g-recaptcha {
        margin-bottom: 20px;
    }
    .recaptcha-checkbox-label {
        display: inline-block;
        margin-left: 5px; 
    }
</style>


<div style="display:@tableState">
    <EditForm Model="@idea" OnValidSubmit="@HandleValidSubmit">
    <head>
    <script src="https://www.google.com/recaptcha/api.js" async defer></script>
    </head>
        <DataAnnotationsValidator />
        <ValidationSummary />
              
        <table class="table borderless">
            <tr class="row">
                <td class="col-6">
                    <label>First Name<span style="color: #FF0000;">*</span></label>
                    <InputText class="form-control" id="firstName" placeholder="John" @bind-Value="idea.FirstName" />
                </td>
                <td class="col-6">
                    <label>Last Name<span style="color: #FF0000;">*</span></label>
                    <InputText class="form-control" id="lastName" placeholder="Doe" @bind-Value="idea.LastName" />
                </td>
            </tr>
            <tr class="row">
                <td class="col-6">
                    <label>Email<span style="color: #FF0000;">*</span></label>
                    <InputText class="form-control" id="email" placeholder="sample@student.umgc.edu" @bind-Value="idea.Email" />
                </td>
                <td class="col-6">
                    <label>Phone</label>
                    <InputText class="form-control" id="phone" placeholder="301-123-4567" @bind-Value="idea.Phone" />
                </td>
            </tr>
            <tr class="row">
                <td class="col-6">
                    <label>Project Title<span style="color: #FF0000;">*</span></label>
                    <InputText class="form-control" id="projectTitle" placeholder="My Project" @bind-Value="idea.ProjectTitle" />
                </td>
                <td class="col-6">
                    <label>Project Description<span style="color: #FF0000;">*</span></label>
                    <InputTextArea class="form-control" id="projectDescription" rows="5" placeholder="The interesting and detailed description of my project idea" @bind-Value="idea.ProjectDescription" />
                </td>
            </tr>
            
            <tr class="row">
                <td class="col-6">
                    <label for="teamMembers">Team Member(s)</label>
                    <tr class="row">
                        <td class="col-10">
                    <InputText class="form-control" id="teamMember" placeholder="Team Member" @oninput="@(e => setInitialTeamMemberValue(e.Value.ToString()))" @bind-Value="idea.TeamMember" />
                        </td>
                        @* <td class="col-2">
                            <button type="button" class="btn btn-primary" @onclick="AddTeamMember">+</button>
                        </td> *@
                           
                        @foreach (var index in Enumerable.Range(0, teamMembers.Count))
                        {
                            <td class = "col-10">
                                <InputText  class = "form-control" id="teamMember" placeholder="Team Member"@bind-Value="teamMembers[index]" 
                                                   @oninput="@(e => UpdateIdeaTeamMembers(index, e.Value.ToString()))" />
                            </td>                             
                            <td class="col-2">
                                <button type="button" class="btn btn-primary" @onclick="RemoveLastTeamMember">-</button> 
                            </td>
                        }
                                 
                    </tr>
                    <div class="">
                                <button type="button" class="btn btn-primary" style="background-color:#A30606;color:#FFFFFF;"  @onclick="AddTeamMember">Add Team Member</button>
                             </div>
                </td>
                
                <td class="col-6">
                    <label for="linkName">Links</label>
                    <tr class="row">
                        <div>
                            <td class="col-4">
                                <InputText class="form-control" id="linkName" placeholder="Link Name"@oninput="@(e => setInitialLinkNameValue(e.Value.ToString()))" 
                                @bind-Value="idea.LinkName" />
                            </td>
                            @* <td class="col-2">
                                <button type="button" class = "btn btn-primary" @onclick="AddLink">+</button>
                            </td>   *@
                        
                            <td class="col-4">
                                <InputText class="form-control" id="url" placeholder="Link URL" @oninput="@(e => setInitialUrlValue(e.Value.ToString()))" @bind-Value="idea.Url" />
                            </td>
                        </div>
                         @* <td class="col-2">
                            <button type="button" class = "btn btn-primary" @onclick="AddUrlLink">+</button>
                        </td>  *@

             
        
                        @* <!-- Additional link name and URL input fields -->
                        @foreach (var index in Enumerable.Range(0, links.Count))
                        {
                            <td class="col-4">
                                <InputText class="form-control" id="linkName" placeholder="Link Name" @bind-Value="links[index]"
                                    @oninput="@(e => UpdateIdeaLinkName(index, e.Value.ToString()))" />
                            </td>
                            <td class="col-2">
                                <button type="button" class = "btn btn-primary" @onclick="RemoveLastLink">-</button>
                            </td>                           
                        }
    
                        @foreach (var index in Enumerable.Range(0, linkUrl.Count))
                        {
                            <td class="col-4">
                                <InputText class="form-control" id="url" placeholder="Link URL" @bind-Value="linkUrl[index]"
                                    @oninput="@(e => UpdateIdeaUrl(index, e.Value.ToString()))" />
                            </td>
                            <td class="col-2">
                                <button type="button" class = "btn btn-primary" @onclick="RemoveLastUrlLink">-</button>
                            </td>
                        } *@

                         @foreach (var index in Enumerable.Range(0, Math.Max(links.Count, linkUrl.Count)))
                        {
                            <tr>
                                <div>
                                <td class="col-4">
                                    @if (index < links.Count)
                                    {
                                        <InputText class="form-control" id="linkName" placeholder="Link Name" @bind-Value="links[index]"
                                            @oninput="@(e => UpdateIdeaLinkName(index, e.Value.ToString()))" />
                                    }
                                </td>
                                <td class="col-4">
                                    @if (index < linkUrl.Count)
                                    {
                                        <InputText class="form-control" id="url" placeholder="Link URL" @bind-Value="linkUrl[index]"
                                            @oninput="@(e => UpdateIdeaUrl(index, e.Value.ToString()))" />
                                    }
                                </td>
                                <td class="col-2">
                                    <button type="button" class="btn btn-primary" @onclick="RemoveLinkandURL">-</button>
                                </td>
                                </div>
                            </tr>
                        }

                    </tr>
                    <div class="">
                        <button type="button" class="btn btn-primary" style="background-color:#A30606;color:#FFFFFF;"  @onclick="AddLinkandUrl">Add Links</button>
                     </div>
                </td>
                 

            </tr>

           


            @if (this.ShowFormButton == FormButtons.Submit)
            {
                <tr class="row">
                    <td class="col-6">
                        <label>
                            <InputCheckbox id="isSponsor" @bind-Value="idea.IsSponsor" @onclick="SponsorCheckBox_Changed" />
                            Self Sponsored
                        </label>
                    </td>
                    <td class="col-6"></td>
                </tr>
            }
        </table>
                
        @if (!idea.IsSponsor)
        {
            <h4>Sponsor Information</h4>
            <table class="table borderless">
                <tr class="row">
                    <td class="col-6">
                        <label>Sponsor First Name</label>
                            <InputText class="form-control" id="firstName" placeholder="Jane" @bind-Value="idea.SponsorFirstName" />
                    </td>
                    <td class="col-6">
                        <label>Sponsor Last Name</label>
                            <InputText class="form-control" id="lastName" placeholder="Doe" @bind-Value="idea.SponsorLastName" />
                    </td>
                </tr>
                <tr class="row">
                    <td class="col-6">
                        <label>Sponsor Email</label>
                            <InputText class="form-control" id="email" placeholder="sponsor@faculty.umgc.edu" @bind-Value="idea.SponsorEmail" />
                    </td>
                    <td class="col-6">
                        <label>Sponsor Phone</label>
                            <InputText class="form-control" id="phone" placeholder="301-555-9999" @bind-Value="idea.SponsorPhone" />
                    </td>
                </tr>
            </table>
        }
@*         <tr class="row">
            <td class="col-6">
                <label  style="color: #212529" >
                    <InputCheckbox id="notRobotCheckbox" @bind-Value="IsNotRobotChecked" />
                    <span style="margin-left: 5px;">I'm not a robot</span>
                </label>
            </td>
        </tr> *@
        @* <form id="myForm">
                <div class="g-recaptcha" data-sitekey="6LeYi6MpAAAAAB3KwooqxWH_ZzC9NeKBgOsytBXs"></div>
        </form> *@
       
         


        <div id="submitAttachments">
            @if (this.ShowFileAttachments)
            {
                <span class="card-header" style="width:300px">Attachments</span>
                @foreach (var file in this.idea.Attachments)
                {
                    <div class="card">
                        <span class="card-body" style="width:300px"><a href="/download/@file.Location" download="@file.Name" target="_top">@file.Name</a></span><br />
                    </div>
                }
            }
            else
            {
                 <p>Drag and drop documents here</p>
                    <InputFile class="btn btn-primary" id="attachment" draggable="true"
                     OnChange="LoadFiles" style="display:none;"
                     multiple accept=".doc,.docx,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,.ppt,.pptx,.pdf" />
                
                <label class="btn btn-primary" style = "background-color:#A30606;color:#FFFFFF;" for="attachment">Choose Files</label>

                    
                @if (uploadProgress > 0 )
                {
                    <div class="progress" style="margin-top: 10px; box-sizing: border-box;">
                        <div class="progress-bar progress-bar-striped progress-bar-animated"
                             role="progressbar"
                             aria-valuenow="@uploadProgress"
                             aria-valuemin="0"
                             aria-valuemax="100"
                             style="width: @uploadProgress%">
                            @uploadProgress%
                        </div>
                    </div>

                }
            }
        </div>    


        @if (this.ShowFormButton == FormButtons.Submit)
        {
            <tr class="row">
                <td class="col-12 text center">
            @if(loadedFiles.Any())  
            {      
            <div style="margin-top: 10px;">
                <div style="border: 1px solid #ccc; padding: 10px; border-radius: 5px; background-color:#CC3333;color:#FFF">
                    Attached Files:
                    <ul style="list-style-type: none; padding: 0; margin: 0;">
                        @foreach (var file in loadedFiles)
                        {
                            <li style="margin-bottom: 5px;">@file.Name
                                <button class="btn btn-primary" style="margin-left: 10px;"  @onclick="() => RemoveFileByName(file.Name)">X</button>
                            </li>
                        }
                    </ul>
                </div>
            </div> 
            }

            <br>
                    <form id="myForm">
                <div class="g-recaptcha" data-sitekey="6LeYi6MpAAAAAB3KwooqxWH_ZzC9NeKBgOsytBXs"></div>
        </form>
                    
                    <button id="btnSubmit" type="submit" @onclick="SponsorCheck" class="btn btn-primary">Submit</button>
                    <button type="reset" class="btn btn-warning">Reset</button> 
                </td>
            </tr>
        }
        else if (this.ShowFormButton == FormButtons.Approver)
        {
            <CascadingAuthenticationState>
                <CommentsComponent ProjectGuid="idea.ProjectID" />
            </CascadingAuthenticationState>

            if (this.idea.IsDirty)
            {
                <button type="button" @onclick="UpdateRecordAsync" class="btn btn-primary">Update</button><span>&nbsp;</span>
            }

            <button type="button" class="btn btn-secondary" @onclick="ExportIdea">Export</button><span>&nbsp;</span>

            <button type="button" class="btn btn-info" @onclick="CloseForm">Close</button><span>&nbsp;</span>

            if (this.idea.Status.Equals("New"))
            {
                <button type="button" class="btn btn-success" @onclick="ApproveIdea">Approve</button><span>&nbsp;</span>
            }

            <button type="button" class="btn btn-danger" @onclick="DeleteIdea">Delete</button><span>&nbsp;</span>
        }


    </EditForm>
</div>

<div style="visibility:@waitBar">
    Uploading ...
    <div>
        <Wander Center="true" />
    </div>

    Thank you for the project idea!
</div>


@code{
    public enum FormButtons
    {
        Submit,
        Approver
    }

    public static bool IsUploading
    {
        get
        {
            return isUploading;
        }
    }

    private bool IsNotRobotChecked { get; set; } = false;

    [Parameter]
    public bool ShowFileAttachments { get; set; } = false;

    [Parameter]
    public bool ShowComments { get; set; } = false;

    [Parameter]
    public FormButtons ShowFormButton { get; set; } = FormButtons.Submit;

    [Parameter]
    public IIdea Parent { get; set; } = null;

    [Parameter]
    public ProjectInformation ProjectIdea
    {
        get
        {
            return idea;
        }
        set
        {
            idea = value;
        }
    }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private ProjectInformation idea = new ProjectInformation();

    private string DownloadFileName => $"{idea.ProjectTitle}-Export.pdf";

    private string Error { get; set; }

    private List<IProjectFile> loadedFiles = new();

    private static bool isUploading = false;

    private string tableState = "block";

    private string waitBar => tableState.Equals("none") ? "visible" : "hidden" ;



    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (this.ShowFormButton == FormButtons.Approver)
        {
            this.idea.IsDirty = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        Console.WriteLine("SUBMITTING A VALID PROJECT");
        var reCaptchaResponse = await JSRuntime.InvokeAsync<string>("grecaptcha.getResponse");

        if (string.IsNullOrEmpty(reCaptchaResponse))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please complete the reCAPTCHA verification.");
            return;
        } 

        IsNotRobotChecked = true;

        string link = "";
        if (!idea.Url.StartsWith("http://") && !idea.Url.StartsWith("https://") && idea.Url.Length != 0)
        {
            link = "https://" + idea.Url;
            idea.Url = link;
        }

        if (!idea.Github.StartsWith("http://") && !idea.Github.StartsWith("https://") && idea.Github.Length != 0)
        {
            link = "https://" + idea.Github;
            idea.Github = link;
        }

        if (!idea.VideoLink.StartsWith("http://") && !idea.VideoLink.StartsWith("https://") && idea.VideoLink.Length != 0)
        {
            link = "https://" + idea.VideoLink;
            idea.VideoLink = link;
        }

        idea.TeamMember = initialValue + " , " + string.Join(", ", teamMembers.Where(tm => !string.IsNullOrWhiteSpace(tm)));
        
        idea.LinkName = initialValueLinkName + " , "+ string.Join(", ", links.Where(tm => !string.IsNullOrWhiteSpace(tm))); 

        idea.Url = initialValueUrl + " , " + string.Join(", ", linkUrl.Where(tm => !string.IsNullOrWhiteSpace(tm)));

        tableState = "none";
        StateHasChanged();

        await Task.Delay(2000);

        var uploaded = await ProjectManager.AddAsync(idea);

        if (uploaded)
        {
            // Clear the form and reset state
            idea.IsDirty = false;
            teamMembers.Clear();
            loadedFiles.Clear();
            links.Clear();
            linkUrl.Clear();
            idea = new ProjectInformation();
        }
       // await Task.Delay(2000);

        tableState = "block";
        @* await JSRuntime.InvokeVoidAsync("grecaptcha.reset"); *@
        StateHasChanged();

        Email("mazero789@gmail.com", "New Project Idea submitted", "A new Project Idea has been submitted. Please visit the CaPPMS website to approve or reject the idea.");


    }

    private async Task Email(string email, string body, string html)
    {
        Console.WriteLine("REACHED SENDING EMAIL");
        try
        {
            await MailService.SendEmailAsync(email, body, html);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error sending email: {ex.Message}");
        }
    }



    private int uploadProgress = 0;

    private async void LoadFiles(InputFileChangeEventArgs inputFile)
    {
        var newFiles = inputFile.GetMultipleFiles()
            .Take(ProjectManager.MaxNumberOfFiles)
            .Where(file => file.Size <= ProjectManager.MaxMBSizePerFile)
            .Select(file => new ProjectFile(file));

        this.loadedFiles = this.loadedFiles.Concat(newFiles).ToList();

        @* this.loadedFiles = this.loadedFiles.Where(file => !ShouldRemoveFile(file)).ToList(); *@


        var totalFiles = loadedFiles.Count;
        var iterations = 10; 

        for (var i = 0; i < iterations; i++)
        {
            var progress = (int)(((float)i / (iterations - 1)) * 100);
            uploadProgress = progress;
            StateHasChanged();

            await Task.Delay(500); 
        }

        

        idea.SetAttachments(loadedFiles);
        


        uploadProgress = 0;
        await Task.Yield();
        StateHasChanged();

       

    }

     // Add this method to remove files based on their filenames
    private void RemoveFileByName(string fileName)
    {
        this.loadedFiles = this.loadedFiles.Where(file => file.Name != fileName).ToList();
        // Update attachments after removing the file
        idea.SetAttachments(loadedFiles);
    }


    private void SponsorCheckBox_Changed(EventArgs e)
    {
        this.idea.IsSponsor = !this.idea.IsSponsor;

        if (!this.idea.IsSponsor)
        {
            ResetSponsor();
        }
    }

    /// <summary>
    /// Sponsor is required so if the project is self sponsored, fill in own information on submit.
    /// </summary>
    /// <param name="e"></param>
    private void SponsorCheck(EventArgs e)
    {
        if (idea.IsSponsor)
        {
            idea.SponsorFirstName = idea.FirstName;
            idea.SponsorLastName = idea.LastName;
            idea.SponsorEmail = idea.Email;
            idea.SponsorPhone = idea.Phone;
        }
    }

    private void ResetSponsor()
    {
        idea.SponsorFirstName = string.Empty;
        idea.SponsorLastName = string.Empty;
        idea.SponsorEmail = string.Empty;
        idea.SponsorPhone = string.Empty;
    }

    private async Task UpdateRecordAsync(EventArgs e)
    {
        if (!idea.IsDirty)
        {
            return;
        }

        idea.IsDirty = !await ProjectManager.UpdateAsync(idea);
    }

    private async Task ApproveIdea(MouseEventArgs e)
    {
        this.idea.Status = "Approved";
        await UpdateRecordAsync(e);
    }

    private async Task ExportIdea(MouseEventArgs e)
    {
        var location = await this.ProjectManager.ExportAsync(idea);

        NavigationManager.NavigateTo($"{ProjectManager.FileManager.DownloadPath}{location}", true);

        this.CloseForm(EventArgs.Empty);
    }

    private async Task DeleteIdea(MouseEventArgs e)
    {
        var authState = await authenticationState;
        string error = await this.ProjectManager.DeleteAsync(idea, authState.User);

        if (string.IsNullOrEmpty(error))
        {
            this.CloseForm(EventArgs.Empty);
        }
        else
        {
            this.Error = error;
        }
    }

    private void CloseForm(EventArgs e)
    {
        if (Parent is null)
        {
            return;
        }

        Parent.CloseIdea(this);
    }

    private void DownloadFile(IProjectFile file)
    {
        NavigationManager.NavigateTo($"/download/{file.Location}", true);
    }


    // Define a list to store team members
    List<string> teamMembers = new List<string>();

    // Function to add a new team member input field
    private void AddTeamMember()
    {
        // Add an empty string to the list
        teamMembers.Add("");

    }
    String initialValue = "";
    private void setInitialTeamMemberValue(string value)
    {
        initialValue = value;
    }

    String initialValueLinkName = "";
    private void setInitialLinkNameValue(string value)
    {
        initialValueLinkName = value;
    }

    String initialValueUrl = "";
    private void setInitialUrlValue(string value)
    {
        initialValueUrl = value;
    }
    private void UpdateIdeaTeamMembers(int index, string value)
    {
        teamMembers[index] = value; // Update the teamMembers array

        // Update idea's TeamMembers property
     //   idea.TeamMember = initialValue + " , " + string.Join(", ", teamMembers.Where(tm => !string.IsNullOrWhiteSpace(tm)));
    }

   // Function to remove the last added team member input field
private void RemoveLastTeamMember()
{
    // Check if there are any team members in the list
    if (teamMembers.Count > 0)
    {
        // Remove the last added team member (which is at the end of the list)
        teamMembers.RemoveAt(teamMembers.Count - 1);

        // Update idea's TeamMembers property
       // idea.TeamMember = string.Join(", ", teamMembers.Where(tm => !string.IsNullOrWhiteSpace(tm)));
    }
}
 

     List<string> links = new List<string>();
    // Function to add a new link input field
    private void AddLink()
    {
        // Add an empty string to the list
        links.Add("");
    }

     private void UpdateIdeaLinkName(int index, string value)
    {
        links[index] = value; // Update the teamMembers array

        // Update idea's TeamMembers property
        @* idea.LinkName = string.Join(", ", links.Where(tm => !string.IsNullOrWhiteSpace(tm))); *@
    } 

    List <string> linkUrl = new List<string>();
    private void AddUrlLink()
    {
        linkUrl.Add("");
    }

    public void AddLinkandUrl()
{
    // Add a new link and URL entry
    links.Add(""); // Add an empty string for the new link name
    linkUrl.Add(""); // Add an empty string for the new link URL
}

public void RemoveLinkandURL() 
{
    RemoveLastLink();
    RemoveLastUrlLink();
}



    private void UpdateIdeaUrl(int index, string value)
    {
        linkUrl[index] = value; // Update the teamMembers array

        // Update idea's TeamMembers property
        @* idea.Url = string.Join(", ", linkUrl.Where(tm => !string.IsNullOrWhiteSpace(tm))); *@
    } 


     // Function to remove the last added link input field
private void RemoveLastLink()
{
    // Check if there are any links in the list
    if (links.Count > 0)
    {
        // Remove the last added link (which is at the end of the list)
        links.RemoveAt(links.Count - 1);

        @* idea.LinkNames = string.Join(", ", links.Where(tm => !string.IsNullOrWhiteSpace(tm))); *@
    }
}

// Function to remove the last added URL link input field
private void RemoveLastUrlLink()
{
    // Check if there are any URL links in the list
    if (linkUrl.Count > 0)
    {
        // Remove the last added URL link (which is at the end of the list)
        linkUrl.RemoveAt(linkUrl.Count - 1);

        @* idea.Url = string.Join(", ", linkUrl.Where(tm => !string.IsNullOrWhiteSpace(tm))); *@
    }
}


    
}


