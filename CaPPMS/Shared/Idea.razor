@inject ProjectManagerService ProjectManager
@inject NavigationManager NavigationManager

<div style="display:@tableState">
    <EditForm Model="@idea" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
              
        <table class="table borderless">
            <tr class="row">
                <td class="col-6">
                    <label>First Name<span style="color: #FF0000;">*</span></label>
                    <InputText class="form-control" id="firstName" placeholder="John" @bind-Value="idea.FirstName" />
                </td>
                <td class="col-6">
                    <label>Last Name<span style="color: #FF0000;">*</span></label>
                    <InputText class="form-control" id="lastName" placeholder="Doe" @bind-Value="idea.LastName" />
                </td>
            </tr>
            <tr class="row">
                <td class="col-6">
                    <label>Email<span style="color: #FF0000;">*</span></label>
                    <InputText class="form-control" id="email" placeholder="sample@student.umgc.edu" @bind-Value="idea.Email" />
                </td>
                <td class="col-6">
                    <label>Phone</label>
                    <InputText class="form-control" id="phone" placeholder="301-123-4567" @bind-Value="idea.Phone" />
                </td>
            </tr>
            <tr class="row">
                <td class="col-6">
                    <label>Project Title<span style="color: #FF0000;">*</span></label>
                    <InputText class="form-control" id="projectTitle" placeholder="My Project" @bind-Value="idea.ProjectTitle" />
                </td>
                <td class="col-6">
                    <label>Project Description<span style="color: #FF0000;">*</span></label>
                    <InputTextArea class="form-control" id="projectDescription" rows="5" placeholder="The interesting and detailed description of my project idea" @bind-Value="idea.ProjectDescription" />
                </td>
            </tr>
            
            <tr class="row">
                <td class="col-6">
                    <label for="teamMembers">Team Member(s)</label>
                    <tr class="row">
                        <td class="col-10">
                            <InputText class="form-control" id="teamMember" placeholder="Team Member" @bind-Value="idea.TeamMember" />
                        </td>
                        <td class="col-2">
                            <button type="button" class="btn btn-primary" @onclick="AddTeamMember">+</button>

                        </td>
                        
                        @foreach (var member in teamMembers)
                        {
                            <tr class="row">
                                <td class = "col-10">
                                   <InputText class="form-control" id="teamMember" placeholder="Team Member" 
                                   style ="width:460px;" @bind-Value="idea.TeamMember" />
                                    
                                </td>
                        
                            </tr>
                        }
                    </tr>
                </td>
                <td class="col-6">
                    <label for="linkName">Links</label>
                    <tr class="row">
                        <td class="col-5">
                            <InputText class="form-control" id="linkName" placeholder="Link Name" @bind-Value="idea.LinkName" />
                        </td>
                        <td class="col-5">
                            <InputText class="form-control" id="url" placeholder="Link URL" @bind-Value="idea.Url" />
                        </td>
                        <td class="col-2">
                            <button type="button" class = "btn btn-primary" @onclick="AddLink">+</button>
                        </td>
        
                             <!-- Additional link name and URL input fields -->
                            @foreach (var link in links)
                            {
                               <tr class="row">
                                   <td class="col-5">
                                        <InputText class="form-control" id="linkName" placeholder="Link Name" @bind-Value="idea.LinkName" />
                                    </td>
                                    <td class="col-5">
                                        <InputText class="form-control" id="url" placeholder="Link URL" @bind-Value="idea.Url" />
                                    </td>
                                </tr>
                            }

                    </tr>
                </td>
            </tr>

            @if (this.ShowFormButton == FormButtons.Submit)
            {
                <tr class="row">
                    <td class="col-6">
                        <label>
                            <InputCheckbox id="isSponsor" @bind-Value="idea.IsSponsor" @onclick="SponsorCheckBox_Changed" />
                            Self Sponsored
                        </label>
                    </td>
                    <td class="col-6"></td>
                </tr>
            }
        </table>
                
        @if (!idea.IsSponsor)
        {
            <h4>Sponsor Information</h4>
            <table class="table borderless">
                <tr class="row">
                    <td class="col-6">
                        <label>Sponsor First Name</label>
                            <InputText class="form-control" id="firstName" placeholder="Jane" @bind-Value="idea.SponsorFirstName" />
                    </td>
                    <td class="col-6">
                        <label>Sponsor Last Name</label>
                            <InputText class="form-control" id="lastName" placeholder="Doe" @bind-Value="idea.SponsorLastName" />
                    </td>
                </tr>
                <tr class="row">
                    <td class="col-6">
                        <label>Sponsor Email</label>
                            <InputText class="form-control" id="email" placeholder="sponsor@faculty.umgc.edu" @bind-Value="idea.SponsorEmail" />
                    </td>
                    <td class="col-6">
                        <label>Sponsor Phone</label>
                            <InputText class="form-control" id="phone" placeholder="301-555-9999" @bind-Value="idea.SponsorPhone" />
                    </td>
                </tr>
            </table>
}
            <tr class="row">
                <td class="col-3"></td>
                <td class="col-6" id="submitAttachments">
                    @if (this.ShowFileAttachments)
                    {
                        <span class="card-header" style="width:300px">Attachments</span>
                        @foreach (var file in this.idea.Attachments)
                        {
                            <div class="card">
                                <span class="card-body" style="width:300px"><a href="/download/@file.Location" download="@file.Name" target="_top">@file.Name</a></span><br />
                            </div>
                        }
                    }
                    else
                    {
                        <p>Drag and drop documents here</p>
                        <InputFile id="attachment" style="width: 400px;" draggable="true" OnChange="LoadFiles" multiple accept=".doc,.docx,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,.ppt,.pptx,.pdf" />
                        <label class="btn btn-primary" for="attachment">Choose Files</label>
                    }
                </td>
                <td class="col-3"></td>
            </tr>

        @if (this.ShowFormButton == FormButtons.Submit)
        {
            <tr class="row">
                <td class="col-12 text center">
                    <button id="btnSubmit" type="submit" @onclick="SponsorCheck" class="btn btn-primary">Submit</button> 
                    <button type="reset" class="btn btn-warning">Reset</button>
                </td>
            </tr>
        }
        else if (this.ShowFormButton == FormButtons.Approver)
        {
            <CascadingAuthenticationState>
                <CommentsComponent ProjectGuid="idea.ProjectID" />
            </CascadingAuthenticationState>

            if (this.idea.IsDirty)
            {
                <button type="button" @onclick="UpdateRecordAsync" class="btn btn-primary">Update</button><span>&nbsp;</span>
            }

            <button type="button" class="btn btn-secondary" @onclick="ExportIdea">Export</button><span>&nbsp;</span>

            <button type="button" class="btn btn-info" @onclick="CloseForm">Close</button><span>&nbsp;</span>

            if (this.idea.Status.Equals("New"))
            {
                <button type="button" class="btn btn-success" @onclick="ApproveIdea">Approve</button><span>&nbsp;</span>
            }

            <button type="button" class="btn btn-danger" @onclick="DeleteIdea">Delete</button><span>&nbsp;</span>
        }


    </EditForm>
</div>

<div style="visibility:@waitBar">
    Uploading ...
    <div>
        <Wander Center="true" />
    </div>

    Thank you for the project idea!
</div>

@code{
    public enum FormButtons
    {
        Submit,
        Approver
    }

    public static bool IsUploading
    {
        get
        {
            return isUploading;
        }
    }

    [Parameter]
    public bool ShowFileAttachments { get; set; } = false;

    [Parameter]
    public bool ShowComments { get; set; } = false;

    [Parameter]
    public FormButtons ShowFormButton { get; set; } = FormButtons.Submit;

    [Parameter]
    public IIdea Parent { get; set; } = null;

    [Parameter]
    public ProjectInformation ProjectIdea
    {
        get
        {
            return idea;
        }
        set
        {
            idea = value;
        }
    }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private ProjectInformation idea = new ProjectInformation();

    private string DownloadFileName => $"{idea.ProjectTitle}-Export.pdf";

    private string Error { get; set; }

    private List<IProjectFile> loadedFiles = new();

    private static bool isUploading = false;

    private string tableState = "block";

    private string waitBar => tableState.Equals("none") ? "visible" : "hidden" ;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (this.ShowFormButton == FormButtons.Approver)
        {
            this.idea.IsDirty = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        string link = "";
        if (!idea.Url.StartsWith("http://") && !idea.Url.StartsWith("https://") && idea.Url.Length != 0)
        {
            link = "https://" + idea.Url;
            idea.Url = link;
        }

        if (!idea.Github.StartsWith("http://") && !idea.Github.StartsWith("https://") && idea.Github.Length != 0)
        {
            link = "https://" + idea.Github;
            idea.Github = link;
        }

        if (!idea.VideoLink.StartsWith("http://") && !idea.VideoLink.StartsWith("https://") && idea.VideoLink.Length != 0)
        {
            link = "https://" + idea.VideoLink;
            idea.VideoLink = link;
        }

        this.tableState = "none";

        await Task.Run( async () =>
        {
            var uploaded = await ProjectManager.AddAsync(idea);

            if (uploaded)
            {
                idea.IsDirty = false;
                loadedFiles.Clear();
                idea = new ProjectInformation();
            }

            await Task.Delay(2000);
        });

        this.tableState = "block";
    }

    private void LoadFiles(InputFileChangeEventArgs inputFile)
    {
        this.loadedFiles.Clear();
        foreach (var file in inputFile.GetMultipleFiles().Take(ProjectManager.MaxNumberOfFiles))
        {
            if (file.Size > ProjectManager.MaxMBSizePerFile)
            {
                continue;
            }

            var projectFile = new ProjectFile(file);

            this.loadedFiles.Add(projectFile);
        }

        idea.SetAttachments(loadedFiles);
    }

    private void SponsorCheckBox_Changed(EventArgs e)
    {
        this.idea.IsSponsor = !this.idea.IsSponsor;

        if (!this.idea.IsSponsor)
        {
            ResetSponsor();
        }
    }

    /// <summary>
    /// Sponsor is required so if the project is self sponsored, fill in own information on submit.
    /// </summary>
    /// <param name="e"></param>
    private void SponsorCheck(EventArgs e)
    {
        if (idea.IsSponsor)
        {
            idea.SponsorFirstName = idea.FirstName;
            idea.SponsorLastName = idea.LastName;
            idea.SponsorEmail = idea.Email;
            idea.SponsorPhone = idea.Phone;
        }
    }

    private void ResetSponsor()
    {
        idea.SponsorFirstName = string.Empty;
        idea.SponsorLastName = string.Empty;
        idea.SponsorEmail = string.Empty;
        idea.SponsorPhone = string.Empty;
    }

    private async Task UpdateRecordAsync(EventArgs e)
    {
        if (!idea.IsDirty)
        {
            return;
        }

        idea.IsDirty = !await ProjectManager.UpdateAsync(idea);
    }

    private async Task ApproveIdea(MouseEventArgs e)
    {
        this.idea.Status = "Approved";
        await UpdateRecordAsync(e);
    }

    private async Task ExportIdea(MouseEventArgs e)
    {
        var location = await this.ProjectManager.ExportAsync(idea);

        NavigationManager.NavigateTo($"{ProjectManager.FileManager.DownloadPath}{location}", true);

        this.CloseForm(EventArgs.Empty);
    }

    private async Task DeleteIdea(MouseEventArgs e)
    {
        var authState = await authenticationState;
        string error = await this.ProjectManager.DeleteAsync(idea, authState.User);

        if (string.IsNullOrEmpty(error))
        {
            this.CloseForm(EventArgs.Empty);
        }
        else
        {
            this.Error = error;
        }
    }

    private void CloseForm(EventArgs e)
    {
        if (Parent is null)
        {
            return;
        }

        Parent.CloseIdea(this);
    }

    private void DownloadFile(IProjectFile file)
    {
        NavigationManager.NavigateTo($"/download/{file.Location}", true);
    }

            // Define a list to store team members
        List<string> teamMembers = new List<string>();

        List<string> links = new List<string>();

      
    // Function to add a new team member input field
    private void AddTeamMember()
    {

        // Add an empty string to the list
        teamMembers.Add("");
    }

    // Function to add a new link input field
    private void AddLink()
    {

        // Add an empty string to the list
        links.Add("");
    }

}
