@using CaPPMS.Model
@inject FaqManagerService FaqManager
@namespace CaPPMS.Shared

@if (this.isAuthenticated)
{
    <h4>
        Unanswered Questions
    </h4>
    <div>
        @foreach (FaqInformation unansweredFaq in FaqManager.FaqInfo.Values)
        {
            @if (unansweredFaq.Reply.Length == 0)
            {
                <div class="row">
                    <div>
                        <button @onclick="e => this.AnswerQuestion(unansweredFaq)">
                            @unansweredFaq.Question
                        </button>
                    </div>
                </div>
            }

        }
    </div>
}

@code {
    [CascadingParameter] private Task<AuthenticationState> AuthenticationState { get; set; }
    [Parameter] public EventCallback<string> TitleChanged { get; set; }
    [Parameter] public string Title { get; set; }
    [Parameter] public EventCallback<FaqInformation> SelectedFaqChanged { get; set; }
    [Parameter] public FaqInformation SelectedFaq { get; set; } = null;

    private bool isAuthenticated;
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationState;
        this.isAuthenticated = authState.User?.Identity.IsAuthenticated ?? false;
        await base.OnInitializedAsync();
    }

    private void AnswerQuestion(FaqInformation unansweredFaq)
    {
        SelectedFaq = unansweredFaq;
        SelectedFaqChanged.InvokeAsync(SelectedFaq);
        Title = "Reply to Question";
        TitleChanged.InvokeAsync(Title);
    }
}
