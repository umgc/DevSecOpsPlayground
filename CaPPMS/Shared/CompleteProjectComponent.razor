@using CaPPMS.Model
@namespace CaPPMS.Shared
@inject ProjectManagerService ProjectManager

<div>
    <EditForm Model="@this.ProjectInformation" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="p-5">
            <label>Team Name:</label>
            <InputText type="text" @bind-Value="completedProject.TeamName"  required/>
            <hr />
            <label>Team Video Link:</label>
            <InputText type="text" @bind-Value="completedProject.VideoLink" />
            <hr />
            <label>Team GitHub Link:</label>
            <InputText type="text" @bind-Value="completedProject.GitHubLink" />
            <hr />
            <label>Team Website Link:</label>
            <InputText type="text" @bind-Value="completedProject.WebsiteLink" />
            <hr />
            <label>

                Project Plan:
                <select class="form-control" id="ProjectPlan" name="ProjectPlan" @bind="completedProject.ProjectPlan" required>
                    @if (this.ProjectInformation.Attachments.Count == 0)
                    {
                        <option selected="selected">Select...</option>
                    }
                    @foreach (ProjectFile file in this.ProjectInformation.Attachments)
                    {
                        <option>@file.Name</option>
                    }
                </select>
            </label>
            <hr />
            <label>
                Software Requirements Specification (SRS):
                <select class="form-control" id="SRS" name="SRS" @bind="completedProject.SRS" required>
                    @if (this.ProjectInformation.Attachments.Count == 0)
                    {
                        <option selected="selected">Select...</option>
                    }
                    @foreach (ProjectFile file in this.ProjectInformation.Attachments)
                    {
                        <option>@file.Name</option>
                    }
                </select>
            </label>
            <hr />
            <label>
                Technical Design Document (TDD):
                <select class="form-control" id="TDD" name="TDD" @bind="completedProject.TDD" required>
                    @if (this.ProjectInformation.Attachments.Count == 0)
                    {
                        <option selected="selected">Select...</option>
                    }
                    @foreach (ProjectFile file in this.ProjectInformation.Attachments)
                    {
                        <option>@file.Name</option>
                    }
                </select>
            </label>
            <hr />
            <label>
                Deployment and Operations Guide (Runbook):
                <select class="form-control" id="Runbook" name="Runbook" @bind="completedProject.Runbook" required>
                    @if (this.ProjectInformation.Attachments.Count == 0)
                    {
                        <option selected="selected">Select...</option>
                    }
                    @foreach (ProjectFile file in this.ProjectInformation.Attachments)
                    {
                        <option>@file.Name</option>
                    }
                </select>
            </label>
            <hr />
            <label>
                Programmers Guide:
                <select class="form-control" id="ProgrammersGuide" name="ProgrammersGuide" @bind="completedProject.ProgrammersGuide" required>
                    @if (this.ProjectInformation.Attachments.Count == 0)
                    {
                        <option selected="selected">Select...</option>
                    }
                    @foreach (ProjectFile file in this.ProjectInformation.Attachments)
                    {
                        <option>@file.Name</option>
                    }
                </select>
            </label>
            <hr />
            <label>
                User Guide:
                <select class="form-control" id="UserGuide" name="UserGuide" @bind="completedProject.UsersGuide" required>
                    @if (this.ProjectInformation.Attachments.Count == 0)
                    {
                        <option selected="selected">Select...</option>
                    }
                    @foreach (ProjectFile file in this.ProjectInformation.Attachments)
                    {
                        <option>@file.Name</option>
                    }
                </select>
            </label>
            <hr />
            <label>
                Test Report:
                <select class="form-control" id="TestReport" name="TestReport" @bind="completedProject.TestReport" required>
                    @if (this.ProjectInformation.Attachments.Count == 0)
                    {
                        <option selected="selected">Select...</option>
                    }
                    @foreach (ProjectFile file in this.ProjectInformation.Attachments)
                    {
                        <option>@file.Name</option>
                    }
                </select>
            </label>
            <hr />
            <button type="submit" class="btn btn-primary">Done</button>
            

        </div>
    </EditForm>
</div>



@code {
    [Parameter] public EventCallback<ProjectInformation> ProjectInformationChanged { get; set; }
    [Parameter]
    public ProjectInformation ProjectInformation
    {
        get { return projectInformation; }
        set
        {
            projectInformation = value;
        }
    }

    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }
    [Parameter]
    public bool IsOpen { get; set; } = false;

    [Parameter] public string Title { get; set; } = null;


    private ProjectInformation projectInformation;
    private Dictionary<ProjectFile, bool> attachmentSelection = new Dictionary<ProjectFile, bool>();
    private CompletedProjectDocumentation completedProject = new CompletedProjectDocumentation();

    private void CancelComplete()
    {
        this.projectInformation = null;
    }
    private async Task Complete(EventArgs e)
    {
        if (!completedProject.VideoLink.StartsWith("http://") && !completedProject.VideoLink.StartsWith("https://") && completedProject.VideoLink.Length > 0)
        {
            completedProject.VideoLink = "//" + completedProject.VideoLink;
        }

        if (!completedProject.WebsiteLink.StartsWith("http://") && !completedProject.WebsiteLink.StartsWith("https://") && completedProject.WebsiteLink.Length > 0)
        {
            completedProject.WebsiteLink = "//" + completedProject.WebsiteLink;
        }

        if (!completedProject.GitHubLink.StartsWith("http://") && !completedProject.GitHubLink.StartsWith("https://") && completedProject.GitHubLink.Length > 0)
        {
            completedProject.GitHubLink = "//" + completedProject.GitHubLink;
        }

        if (completedProject.ProjectPlan.Length > 0)
        {
            completedProject.ProjectPlanLink = GetFilePath(completedProject.ProjectPlan);
        }

        if (completedProject.SRS.Length > 0)
        {
            completedProject.SRSLink = GetFilePath(completedProject.SRS);
        }

        if (completedProject.TDD.Length > 0)
        {
            completedProject.TDDLink = GetFilePath(completedProject.TDD);
        }

        if (completedProject.Runbook.Length > 0)
        {
            completedProject.RunbookLink = GetFilePath(completedProject.Runbook);
        }

        if (completedProject.ProgrammersGuide.Length > 0)
        {
            completedProject.ProgrammersGuideLink = GetFilePath(completedProject.ProgrammersGuide);
        }

        if (completedProject.UsersGuide.Length > 0)
        {
            completedProject.UsersGuideLink = GetFilePath(completedProject.UsersGuide);
        }

        if (completedProject.TestReport.Length > 0)
        {
            completedProject.TestReportLink = GetFilePath(completedProject.TestReport);
        }

        ProjectInformation.Status = "Complete";

        ProjectInformation.CompletedDocuments.Add(completedProject);

        IsOpen = false;
        await IsOpenChanged.InvokeAsync(IsOpen);

    }

    private async Task HandleValidSubmit()
    {
        if (!completedProject.VideoLink.StartsWith("http://") && !completedProject.VideoLink.StartsWith("https://") && completedProject.VideoLink.Length > 0)
        {
            completedProject.VideoLink = "//" + completedProject.VideoLink;
        }

        if (!completedProject.WebsiteLink.StartsWith("http://") && !completedProject.WebsiteLink.StartsWith("https://") && completedProject.WebsiteLink.Length > 0)
        {
            completedProject.WebsiteLink = "//" + completedProject.WebsiteLink;
        }

        if (!completedProject.GitHubLink.StartsWith("http://") && !completedProject.GitHubLink.StartsWith("https://") && completedProject.GitHubLink.Length > 0)
        {
            completedProject.GitHubLink = "//" + completedProject.GitHubLink;
        }

        if (completedProject.ProjectPlan.Length > 0)
        {
            completedProject.ProjectPlanLink = GetFilePath(completedProject.ProjectPlan);
        }

        if (completedProject.SRS.Length > 0)
        {
            completedProject.SRSLink = GetFilePath(completedProject.SRS);
        }

        if (completedProject.TDD.Length > 0)
        {
            completedProject.TDDLink = GetFilePath(completedProject.TDD);
        }

        if (completedProject.Runbook.Length > 0)
        {
            completedProject.RunbookLink = GetFilePath(completedProject.Runbook);
        }

        if (completedProject.ProgrammersGuide.Length > 0)
        {
            completedProject.ProgrammersGuideLink = GetFilePath(completedProject.ProgrammersGuide);
        }

        if (completedProject.UsersGuide.Length > 0)
        {
            completedProject.UsersGuideLink = GetFilePath(completedProject.UsersGuide);
        }

        if (completedProject.TestReport.Length > 0)
        {
            completedProject.TestReportLink = GetFilePath(completedProject.TestReport);
        }

        ProjectInformation.Status = "Complete";

        ProjectInformation.CompletedDocuments.Add(completedProject);

        IsOpen = false;
        await IsOpenChanged.InvokeAsync(IsOpen);
    }

    private string GetFilePath(string fileName)
    {
        string filePath = "";
        foreach (var attachment in ProjectInformation.Attachments)
        {
            if (attachment.Name.Equals(fileName))
            {
                filePath = attachment.Location;
            }
        }
        return filePath;
    }


}