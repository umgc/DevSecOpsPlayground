@using CaPPMS.Model
@namespace CaPPMS.Shared
@inject ProjectManagerService ProjectManager

<div>
    <EditForm Model="@this.ProjectInformation">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="p-5">
            <label>Team Name:</label>
            <InputText type="text" @bind-Value="TeamName" />
            <hr />
            <label>
                Project Plan:
                <select class="form-control" id="ProjectPlan" name="ProjectPlan" @bind="ProjectPlanPath">
                    @if (this.ProjectInformation.Attachments.Count == 0)
                    {
                        <option selected="selected">Select...</option>
                    }
                    @foreach (ProjectFile file in this.ProjectInformation.Attachments)
                    {
                        <option>@file.Name</option>
                    }
                </select>
            </label>
            <hr />
            <label>
                Software Requirements Specification (SRS):
                <select class="form-control" id="SRS" name="SRS" @bind="SRSPath">
                    @if (this.ProjectInformation.Attachments.Count == 0)
                    {
                        <option selected="selected">Select...</option>
                    }
                    @foreach (ProjectFile file in this.ProjectInformation.Attachments)
                    {
                        <option>@file.Name</option>
                    }
                </select>
            </label>
            <hr />
            <label>
                Technical Design Document (TDD):
                <select class="form-control" id="TDD" name="TDD" @bind="TDDPath">
                    @if (this.ProjectInformation.Attachments.Count == 0)
                    {
                        <option selected="selected">Select...</option>
                    }
                    @foreach (ProjectFile file in this.ProjectInformation.Attachments)
                    {
                        <option>@file.Name</option>
                    }
                </select>
            </label>
            <hr />
            <label>
                Deployment and Operations Guide (Runbook):
                <select class="form-control" id="Runbook" name="Runbook" @bind="RunbookPath">
                    @if (this.ProjectInformation.Attachments.Count == 0)
                    {
                        <option selected="selected">Select...</option>
                    }
                    @foreach (ProjectFile file in this.ProjectInformation.Attachments)
                    {
                        <option>@file.Name</option>
                    }
                </select>
            </label>
            <hr />
            <label>
                Programmers Guide:
                <select class="form-control" id="ProgrammersGuide" name="ProgrammersGuide" @bind="ProgGuidePath">
                    @if (this.ProjectInformation.Attachments.Count == 0)
                    {
                        <option selected="selected">Select...</option>
                    }
                    @foreach (ProjectFile file in this.ProjectInformation.Attachments)
                    {
                        <option>@file.Name</option>
                    }
                </select>
            </label>
            <hr />
            <label>
                User Guide:
                <select class="form-control" id="UserGuide" name="UserGuide" @bind="UserGuidePath">
                    @if (this.ProjectInformation.Attachments.Count == 0)
                    {
                        <option selected="selected">Select...</option>
                    }
                    @foreach (ProjectFile file in this.ProjectInformation.Attachments)
                    {
                        <option>@file.Name</option>
                    }
                </select>
            </label>
            <hr />
            <label>
                Test Report:
                <select class="form-control" id="TestReport" name="TestReport" @bind="TestReportPath">
                    @if (this.ProjectInformation.Attachments.Count == 0)
                    {
                        <option selected="selected">Select...</option>
                    }
                    @foreach (ProjectFile file in this.ProjectInformation.Attachments)
                    {
                        <option>@file.Name</option>
                    }
                </select>
            </label>
            <hr />

            <button type="button" @onclick="Complete">
                Done
            </button>
            
        </div>
    </EditForm>
</div>



@code {
    [Parameter] public EventCallback<ProjectInformation> ProjectInformationChanged { get; set; }
    [Parameter]
    public ProjectInformation ProjectInformation
    {
        get { return projectInformation; }
        set
        {
            projectInformation = value;
        }
    }
    [Parameter] public string Title { get; set; } = null;
    private bool teamsClicked = false;


    private ProjectInformation projectInformation;
    private Dictionary<ProjectFile, bool> attachmentSelection = new Dictionary<ProjectFile, bool>();
    private String ProjectPlanPath = "";
    private String SRSPath = "";
    private String TDDPath = "";
    private String RunbookPath = "";
    private String ProgGuidePath = "";
    private String UserGuidePath = "";
    private String TestReportPath = "";
    private String SemesterTermVal = "";
    private String SemesterYearVal = "";
    private String TeamName = "";

    private void CancelComplete()
    {
        this.projectInformation = null;
    }
    private async Task Complete(EventArgs e)
    {
        CompletedProjectDocumentation completedProject = new CompletedProjectDocumentation();
        completedProject.TeamName = this.TeamName;

        completedProject.ProjectPlan = this.ProjectPlanPath;
        completedProject.ProjectPlanLink = GetFilePath(this.ProjectPlanPath);

        completedProject.SRS = this.SRSPath;
        completedProject.SRSLink = GetFilePath(this.SRSPath);

        completedProject.TDD = this.TDDPath;
        completedProject.TDDLink = GetFilePath(this.TDDPath);

        completedProject.Runbook = this.RunbookPath;
        completedProject.RunbookLink = GetFilePath(this.RunbookPath);

        completedProject.ProgrammersGuide = this.ProgGuidePath;
        completedProject.ProgrammersGuideLink = GetFilePath(this.ProgGuidePath);

        completedProject.UsersGuide = this.UserGuidePath;
        completedProject.UsersGuideLink = GetFilePath(this.UserGuidePath);

        completedProject.TestReport = this.TestReportPath;
        completedProject.TestReportLink = GetFilePath(this.TestReportPath);

        projectInformation.SemesterTerm = this.SemesterTermVal;
        projectInformation.SemesterYear = this.SemesterYearVal;
        projectInformation.Status = "Complete";

        projectInformation.CompletedDocuments.Add(completedProject);

        ProjectInformation = projectInformation;
        if (!ProjectInformation.IsDirty)
        {
            return;
        }
        ProjectInformation.IsDirty = !await ProjectManager.UpdateAsync(ProjectInformation);

    }

    private string GetFilePath(string fileName)
    {
        string filePath = "";
        foreach (var attachment in ProjectInformation.Attachments)
        {
            if (attachment.Name.Equals(fileName))
            {
                filePath = attachment.Location;
            }
        }
        return filePath;
    }

    private async Task HandleValidSubmit()
    {
        await Task.Run(async () =>
        {
            var uploaded = await ProjectManager.UpdateAsync(projectInformation);

            if (uploaded)
            {
                projectInformation.IsDirty = false;
                //projectInformation = new ProjectInformation();

            }

            await Task.Delay(2000);
        });
    }

}