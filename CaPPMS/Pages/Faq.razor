@using System.Collections.Concurrent;
@using CaPPMS.Data
@using CaPPMS.Model

@using System.Collections.Generic;
@using System.IO;
@using System.Security.Principal;
@using System.Threading.Tasks;

@using Newtonsoft.Json;
@using Octokit;
@using iTextSharp.text;
@using iTextSharp.text.pdf;
@using System;

@inject FaqManagerService faqManager


@page "/faq"

<h3>FAQ</h3>


@foreach (var faq in faqManager.GetFaqs)
{

    <tr id="Faq.key">
        <td>@faq.Topic</td>
        <td>@faq.Question</td>
        <td>@faq.Author</td>
        <td>@faq.Reply</td>
    </tr>
}


<div class="m-2 p-2 rounded">
    @if (NewFaq != null)
    {
        <EditForm OnValidSubmit="@HandleValidSubmit" Model="NewFaq">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="card" id="@NewFaq.Guid">
                <span class="fas fa-comment"></span> Add Topic:

                <InputText @bind-Value="NewFaq.Topic" /><br />
                <span class="fas fa-comment"></span> Add Question:

                <InputText @bind-Value="NewFaq.Question" /><br />
                <span class="fas fa-comment"></span> Add Author:

                <InputText @bind-Value="NewFaq.Author" /><br />
                <span class="fas fa-comment"></span> Add Reply:

                <InputTextArea @bind-Value="NewFaq.Reply" /><br />
                <button type="submit" class="btn btn-primary">Add Faq</button>
            </div>
        </EditForm>
     }
</div>




@code {


    private FaqInformation NewFaq { get; set; } = new();

    private string Question { get; set; } = string.Empty;

    private string Author { get; set; } = string.Empty;

    private string Reply { get; set; } = string.Empty;

    private string Topic { get; set; } = string.Empty;
    protected override void OnInitialized()
    {
        base.OnInitialized();

        FaqManagerService.FaqsChanged += (o, e) =>
        {
            ShouldUpdateState();
        };
    }


    private void ShouldUpdateState()
    {
        InvokeAsync(() =>
        {
            this.StateHasChanged();
        });
    }

    private FaqInformation GenerateNewFaq()
    {
        return new FaqInformation();
    }


    private void HandleValidSubmit()
    {
        faqManager.Add(NewFaq);
        NewFaq = new FaqInformation();
    }

}
