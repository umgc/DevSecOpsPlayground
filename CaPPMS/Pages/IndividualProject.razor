@using CaPPMS.Model
@using Microsoft.AspNetCore.WebUtilities

@* @page "/individualProject" *@
@page "/individualProject/{ProjectID}" 


@* @inject ProjectManagerService ProjectManager
@foreach (ProjectInformation idea in sortedProjects)
{
    termStr = idea.SemesterTerm + idea.SemesterYear;
    if (!activeTerms.Contains(termStr))
    {
        <h3>@idea.SemesterTerm @idea.SemesterYear </h3>
        activeTerms.Add(termStr);
    }
    <h5><b>@idea.ProjectTitle </b></h5>
    <p> @idea.ProjectDescription </p>
    if (idea.Github.Length > 0)
    {
        <b>Project GitHub Link: </b>
        <a href="@idea.Github" target="_blank" rel="noopener noreferrer">@idea.Github</a>
        <br />
    } 
    <br>
    @if (idea.ProjectID != Guid.Empty) 
    {
        <b>Project ID:</b>
        <p>@idea.ProjectID</p> 
    }
    if (idea.Url.Length > 0)
    {
        <b> Project Website Link: </b>
        <a href="@idea.Url" target="_blank" rel="noopener noreferrer">@idea.Url</a>
        <br />
    } 

    if (idea.CompletedDocuments.Count > 0)
    {
        @foreach (CompletedProjectDocumentation proj in idea.CompletedDocuments)
        {
            <b> Team:</b>
            <p>@proj.TeamName</p>

            if (proj.GitHubLink.Length > 0)
            {
                <b>Team GitHub Link: </b>
                <a href="@proj.GitHubLink" target="_blank" rel="noopener noreferrer">@proj.GitHubLink</a>
                <br />
            }
            if (proj.VideoLink.Length > 0)
            {
                <b>Team Video Link: </b>
                <a href="@proj.VideoLink" target="_blank" rel="noopener noreferrer">@proj.VideoLink</a>
                <br />
            }
            if (proj.WebsiteLink.Length > 0)
            {
                <b> Team Website Link: </b>
                <a href="@proj.WebsiteLink" target="_blank" rel="noopener noreferrer">@proj.WebsiteLink</a>
                <br />
            }

            <b> Documents for Team @proj.TeamName: </b>
            <ul>
                <li> <a href="/download/@proj.ProjectPlanLink" download="@proj.ProjectPlan" target="_top">Project Plan</a> </li>
                <li> <a href="/download/@proj.SRSLink" download="@proj.SRS" target="_top">Software Requirements Specification (SRS)</a> </li>
                <li> <a href="/download/@proj.TDDLink" download="@proj.TDD" target="_top">Technical Design Document (TDD)</a> </li>
                <li> <a href="/download/@proj.RunbookLink" download="@proj.Runbook" target="_top">Deployment and Operations Guide (Runbook)</a> </li>
                <li> <a href="/download/@proj.ProgrammersGuideLink" download="@proj.ProgrammersGuide" target="_top">Programmer Guide</a> </li>
                <li> <a href="/download/@proj.UsersGuideLink" download="@proj.UsersGuide" target="_top">User Guide</a> </li>
                <li> <a href="/download/@proj.TestReportLink" download="@proj.TestReport" target="_top">Test Report</a> </li>
            </ul>

        } 

    }

    <hr />
} 
<br />

@code {

    [Parameter]
    public string ProjectID { get; set; }

    IEnumerable<ProjectInformation> sortedProjects;
    protected override void OnInitialized()
    {
        SetCompletedProjectsList();
        ProjectManagerService.ProjectIdeasChanged += (o, e) =>
        {
            SetCompletedProjectsList();
        };
        base.OnInitialized();
    }
    private List<string> activeTerms = new List<string>();
    private string termStr;
    private void SetCompletedProjectsList()
    {
        List<ProjectInformation> completedProjects = new List<ProjectInformation>();
        foreach (ProjectInformation projectInformation in ProjectManager.ProjectIdeas.Values)
        {
            if (projectInformation.Status.Equals("Complete"))
            {
                completedProjects.Add(projectInformation);
            }
        }
        sortedProjects = completedProjects
            .OrderByDescending(o => o.SemesterYear)
            .ThenBy(o => o.SemesterTerm == "Spring")
            .ThenBy(o => o.SemesterTerm == "Summer")
            .ThenBy(o => o.SemesterTerm == "Fall");
    } 
}       *@



@inject ProjectManagerService ProjectManager
@foreach (ProjectInformation idea in sortedProjects)
{
    <hr />
    <b><h1>@idea.ProjectTitle</h1></b>
    <br>
    <div style="text-align: center;">
        @if (!string.IsNullOrEmpty(GetVideoEmbedUrl(idea.VideoLink)))
        {
            <iframe width="560" height="315" src="@GetVideoEmbedUrl(idea.VideoLink)" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
        }
        else
        {
            <p style="text-align: left; color: red;">*** No Project Video Link ***</p>
 
        }
    </div>
        <br>
        @idea.ProjectDescription
        <br>
        <br>
        if (idea.CompletedDocuments.Count > 0)
        {
            @foreach (CompletedProjectDocumentation proj in idea.CompletedDocuments)
            {
                <b>Team Name: </b> @proj.TeamName
                @* <p>@proj.TeamName</p> *@
                <br>
                <br>
                @* if (proj.GitHubLink.Length > 0)
                {
                    <b>Team GitHub Link: </b>
                    <a href="@proj.GitHubLink" target="_blank" rel="noopener noreferrer">@proj.GitHubLink</a>
                    <br />
                } *@
                @* if (proj.VideoLink.Length > 0)
                {
                    <b>Team Video Link: </b>
                    <a href="@proj.VideoLink" target="_blank" rel="noopener noreferrer">@proj.VideoLink</a>
                    <br />
                } *@
                @* if (proj.WebsiteLink.Length > 0)
                {
                    <b> Team Website Link: </b>
                    <a href="@proj.WebsiteLink" target="_blank" rel="noopener noreferrer">@proj.WebsiteLink</a>
                    <br />
                } *@

                <b> Documents for Team @proj.TeamName: </b>
                <br>
                <br>
                <ul>
                    <li> <a href="/download/@proj.ProjectPlanLink" download="@proj.ProjectPlan" target="_top" style="color: #A30606; font-weight: bold;">Project Plan</a> </li>
                    <li> <a href="/download/@proj.SRSLink" download="@proj.SRS" target="_top" style="color: #A30606; font-weight: bold;">Software Requirements Specification (SRS)</a> </li>
                    <li> <a href="/download/@proj.TDDLink" download="@proj.TDD" target="_top" style="color: #A30606; font-weight: bold;">Technical Design Document (TDD)</a> </li>
                    <li> <a href="/download/@proj.RunbookLink" download="@proj.Runbook" target="_top" style="color: #A30606; font-weight: bold;">Deployment and Operations Guide (Runbook)</a> </li>
                    <li> <a href="/download/@proj.ProgrammersGuideLink" download="@proj.ProgrammersGuide" target="_top" style="color: #A30606; font-weight: bold;">Programmer Guide</a> </li>
                    <li> <a href="/download/@proj.UsersGuideLink" download="@proj.UsersGuide" target="_top" style="color: #A30606; font-weight: bold;">User Guide</a> </li>
                    <li> <a href="/download/@proj.TestReportLink" download="@proj.TestReport" target="_top" style="color: #A30606; font-weight: bold;">Test Report</a> </li>
                </ul>

            } 
        }
        @* <br>
        <br>
        <b>Project ID:    </b> @idea.ProjectID 
        <br>
        <br>
        <b>Semester Term: </b> @idea.SemesterTerm
        <br>
        <br>
        <b>Semester Year: </b> @idea.SemesterYear *@
        <b>Links:</b>
        <br>
        <br>
            <ul>
                @if (!string.IsNullOrWhiteSpace(idea.Github))
                {
                    <li><a href="@idea.Github" target="_blank" style="color: #A30606; font-weight: bold;">GitHub</a></li>
                }
                else
                {
                    <li><span style="color: red;">*** No Link ***</span></li>

                }
            </ul>
        @* <b>Team Name:</b>  *@
        <b>Team Members:</b> 
        <br>
        <br>
            <ul>
                <li><a>@idea.TeamMembers</a></li>
            </ul>
        <br> 
        <br>
        <br> 
        <br>
        <hr />         
}
<br>
<br>
<br>
<hr />

@code {
    [Parameter]
    public string ProjectID { get; set; } 

    IEnumerable<ProjectInformation> sortedProjects;

    protected override void OnInitialized()
    {
        SetCompletedProjectsList();
        base.OnInitialized();
    }

    private void SetCompletedProjectsList()
    {
        Guid parsedProjectId;
        bool isValidGuid = Guid.TryParse(ProjectID, out parsedProjectId);

        if (!isValidGuid)
        {
            sortedProjects = Enumerable.Empty<ProjectInformation>();
            return;
        }

        List<ProjectInformation> completedProjects = new List<ProjectInformation>();
        foreach (ProjectInformation projectInformation in ProjectManager.ProjectIdeas.Values)
        {
            if (projectInformation.Status.Equals("Complete") && projectInformation.ProjectID == parsedProjectId)
            {
                completedProjects.Add(projectInformation);
            }
        }
        sortedProjects = completedProjects;
    }
    public string GetVideoEmbedUrl(string videoLink)
    {
        if (string.IsNullOrWhiteSpace(videoLink))
        {
            return null; 
        }

        try
        {
            var uri = new Uri(videoLink);
            var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
            var videoId = query["v"].ToString();
            return $"https://www.youtube.com/embed/{videoId}";
        }
        catch
        {
            return null; 
        }
    }
}
