@page "/individualManageProject/{ProjectID}"
@using CaPPMS.Model
@namespace CaPPMS.Shared 
@inject ProjectManagerService ProjectManager 
@inject NavigationManager NavigationManager
@* @inject GitHubService GitHub   *@
@using Microsoft.AspNetCore.WebUtilities 
@using Microsoft.AspNetCore.Components.Forms 
@using System.Collections.Generic
@inject IJSRuntime JSRuntime



<style>
    table {
        width: 100%;
    }

    tr {
        margin-top: 0;
        padding: 0px;
        text-align: center;
    }

    td {
        text-align: left;
        margin-top: 0;
        padding-top: 0;
    }
    .file-input {
        display: none;
    }
    .file-input-button {
        display: inline-block;
        background-color: #A30606;
        color: #FFFFFF;
        padding: 10px 20px;
        text-align: center;
        cursor: pointer;
        border-radius: 5px;
    }
</style>

@foreach (ProjectInformation idea in sortedProjects)
{
    <br>
    <h1>@idea.ProjectTitle</h1>
    <br>
    <table>
        <h5>Submitter Information</h5>
            <div class="row">
                <div class="col-6" >
                    <label>First Name</label>
                    @* <input type="text" class="form-control" value="@idea.FirstName">  *@
                    @* <input type="text" class="form-control" bind="@idea.FirstName" @onchange="(() => MarkAsDirty(idea))"> *@
                <input type="text" class="form-control" @bind="@_infoPlaceholder.FirstName">
                </div>
                <div class="col-6" >
                    <label>Last Name</label>
                <input type="text" class="form-control" @bind="@_infoPlaceholder.LastName">
                </div>
            </div>
            <br>
            <div class="row">
                <div class="col-6" >
                    <label>Email</label>
                <input type="text" class="form-control" @bind="@_infoPlaceholder.Email">
                </div>
                <div class="col-6" >
                    <label>Phone</label>
                <input type="text" class="form-control" @bind="@_infoPlaceholder.Phone">
                </div>
            </div>
            <br>
            <br>
        <h5>Sponsor Information</h5>
            <div class="row">
                <div class="col-6" >
                    <label>First Name</label>
                    @* <input type="text" class="form-control" value="@idea.SponsorFirstName"> *@
                <input type="text" class="form-control" @bind="@_infoPlaceholder.SponsorFirstName">
                </div>
                <div class="col-6" >
                    <label>Last Name</label>
                <input type="text" class="form-control" @bind="@_infoPlaceholder.SponsorLastName">
                </div>
            </div>
            <br>
            <div class="row">
                <div class="col-6" >
                    <label>Email</label>
                <input type="text" class="form-control" @bind="@_infoPlaceholder.SponsorEmail">
                </div>
                <div class="col-6" >
                    <label>Phone</label>
                <input type="text" class="form-control" @bind="@_infoPlaceholder.SponsorPhone">
                </div>
            </div>
            <br>
            <br>  
        <h5>Project Information</h5>
            <div class="row">
                <div class="col-6" >
                    <label>Project Title</label>
                <input type="text" class="form-control" @bind="@_infoPlaceholder.ProjectTitle">
                </div>
                <div class="col-6" >
                    <label>Project Description</label>
                <textarea class="form-control" id="mpProjectDescription" rows="5" style="height: 269px;" @bind="@_infoPlaceholder.ProjectDescription">
                        
                    </textarea>
                </div>
            </div>
            <br>
            <div class="row">
                @* <td class="col-6">
                    <label for="teamMembers">Team Member(s)</label>
                    <tr class="row">
                        <td class="col-10">
                         <InputText class="form-control" id="teamMember" placeholder="Team Member" @oninput="@(e => setInitialTeamMemberValue(e.Value.ToString()))" @bind-Value="idea.TeamMember" />
                        </td>
                           
                        @foreach (var index in Enumerable.Range(0, teamMembers.Count))
                        {
                            <td class = "col-10">
                                <InputText  class = "form-control" id="teamMember" placeholder="Team Member"@bind-Value="teamMembers[index]" 
                                                   @oninput="@(e => UpdateIdeaTeamMembers(index, e.Value.ToString()))" />
                            </td>                             
                            <td class="col-2">
                                <button type="button" class="btn btn-primary" @onclick="RemoveLastTeamMember">-</button> 
                            </td>
                        }
                                 
                    </tr>
                    <br>
                    <div class="">
                                <button type="button" class="btn btn-primary" style="background-color:#A30606;color:#FFFFFF;"  @onclick="AddTeamMember">Add Team Member</button>
                     </div>
                </td> *@
            

		
				<div class="col-6">
                    <label for="mpTeamMember">Team Member(s)</label>
                    <br>
                    <div>

                        <div class="row">
                            <div class="col-10">
                                @* <input type="text" class="form-control" @bind="@idea.TeamMember"> *@
                               <InputText class="form-control" id="teamMember" placeholder="Team Member" @oninput="@(e => setInitialTeamMemberValue(e.Value.ToString()))" @bind-Value="idea.TeamMember" />

                            </div>
                        </div> 
                        <br>
                        <div>
                            @* @foreach (var member in teamMembers) *@
                            @foreach (var index in Enumerable.Range(0, teamMembers.Count))

                            {
                                <div class="row mb-2"> 
                                    <div class="col-10">
                                        @* <input type="text" class="form-control" @bind="@idea.TeamMember" @oninput="(ChangeEventArgs e) => UpdateTeamMember(e, member)"> *@
                                        <InputText  class = "form-control" id="teamMember" placeholder="Team Member"@bind-Value="teamMembers[index]" 
                                                   @oninput="@(e => UpdateIdeaTeamMembers(index, e.Value.ToString()))" />
                                    </div>
                                    <div class="col-2">
                                        @* <button type="button" class="btn" style="background-color:#A30606;color:#FFFFFF;"  @onclick="() => RemoveTeamMember(member)">-</button> *@
                                        <button type="button" class="btn btn-primary" @onclick="RemoveLastTeamMember">-</button> 
                                    </div>
                                </div>
                                <br>
                            }
                        </div>
                    <div class="">
                                <button type="button" class="btn btn-primary" style="background-color:#A30606;color:#FFFFFF;"  @onclick="AddTeamMember">Add Team Member</button>
                     </div>

                        @* <br>
                        <div>
                            @if (errorMessage)
                            {
                                <div class="alert alert-danger" role="alert">
                                    Cannot add more than 8 team members.
                                </div>
                            }
                        </div>
                    </div> *@
                    </div>
                </div> 
                
                <div class="col-6" >
                    <label for="mpVideoLink">Links</label>
                         <div class="row">
                            <div class="col-5">
                                <input type="text" class="form-control" id="mpVideoLinkLabel" disabled value="Video Link" >
                            </div>
                            <div class="col-5" >
                        <input type="text" class="form-control" id="mpVideoLink" placeholder="Link URL" @bind="@_infoPlaceholder.VideoLink">
                            </div>
                            <div class="col-2" >
						        @* <button @onclick="NextInput" class="btn" style="background-color:#A30606;color:#FFFFFF;">+</button> *@
                            </div>
                            <br>
					    </div>
                        <br>
                        <div class="row">
                            <div class="col-5" >
                                <input type="text" class="form-control" id="mpVideoLinkLabel2" placeholder="Link Name" disabled value="GitHub" >
                            </div>
                            <div class="col-5" >
                        <input type="text" class="form-control" id="mpVideoLink2" placeholder="Link URL" @bind="@_infoPlaceholder.Github">
                            </div>
                            <div class="col-2" >
						        @* <button @onclick="NextInput" class="btn" style="background-color:#A30606;color:#FFFFFF;">+</button> *@
                            </div>
                        </div>

                        <br>
                        

                    @* <div class="row"> *@
                        <div class = "row">
                            <td class="col-5">
                                <InputText class="form-control" id="linkName" placeholder="Link Name"@oninput="@(e => setInitialLinkNameValue(e.Value.ToString()))" 
                                @bind-Value="idea.LinkName" />
                            </td>
                        
                            <td class="col-5">
                                <InputText class="form-control" id="url" placeholder="Link URL" @oninput="@(e => setInitialUrlValue(e.Value.ToString()))" @bind-Value="idea.Url" />
                            </td>
                        </div>   

                        <br>    
        
                         <!-- Additional link name and URL input fields -->
                         
                         @foreach (var index in Enumerable.Range(0, Math.Max(links.Count, linkUrl.Count)))
                        {
                            <tr class="row mb-2"> 
                                <div>
                                <td class="col-4">
                                    @if (index < links.Count)
                                    {
                                        <InputText class="form-control" id="linkName" placeholder="Link Name" @bind-Value="links[index]"
                                            @oninput="@(e => UpdateIdeaLinkName(index, e.Value.ToString()))" />
                                    }
                                </td>
                                <td class="col-4">
                                    @if (index < linkUrl.Count)
                                    {
                                        <InputText class="form-control" id="url" placeholder="Link URL" @bind-Value="linkUrl[index]"
                                            @oninput="@(e => UpdateIdeaUrl(index, e.Value.ToString()))" />
                                    }
                                </td>
                                <td class="col-2">
                                    <button type="button" class="btn btn-primary" @onclick="RemoveLinkandURL">-</button>
                                </td>
                                </div>
                                
                            </tr>
                        }
                        


                    @* </div> *@
                    <br>
                    <div class="">
                        <button type="button" class="btn btn-primary" style="background-color:#A30606;color:#FFFFFF;"  @onclick="AddLinkandUrl">Add Links</button>
                     </div>
                
                 

@*                         
                        <div>
                            @foreach (var newUrl in newLinks.Select((value, index) => new { value, index }))
                            {   
                                <br>
                                <div class="row"> 
                                    <div class="col-5">
                                        <input type="text" class="form-control" @bind="newLinks[newUrl.index]" @bind:event="oninput" placeholder="Link Name">
                                    </div>
                                    <div class="col-5">
                                        <input type="text" class="form-control" placeholder="Link URL" @bind="@idea.Url">
                                    </div>
                                    <div class="">
                                        <button type="button" class="btn" style="background-color:#A30606;color:#FFFFFF;"  @onclick="() => RemoveLink(newUrl.index)">-</button>
                                    </div>
                                </div>
                                
                            }
                            <br>
                            <div class="">
                                <button type="button" class="btn" style="background-color:#A30606;color:#FFFFFF;"  @onclick="AddNewLink">Add Link</button>
                            </div>    
                        </div>
                        <br>
                        @if (displayErrorMessage)
                        {
                            <div class="alert alert-danger" role="alert">
                                Cannot add more than 3 links.
                            </div>
                        } *@
                        
                        

                        @* <div>
                         @foreach (var newUrl in newLinks)
                        {
                            <div class="row"> 
                                <div class="col-5">
                                    <input type="text" class="form-control" id="mpVideoLinkLabel2" @bind="@idea.Url" @oninput="(ChangeEventArgs e) => UpdateLink(e, newUrl)">
                                    TEST5
                                </div>
                                <div class="col-5">
                                    <input type="text" class="form-control" id="mpVideoLink2" placeholder="Link URL" @bind="@idea.Url">
                                </div>
                                <div class="col-2">
                                    <button type="button" class="btn btn-danger" @onclick="() => RemoveLink(newUrl)">-</button>
                                </div>
                            </div>
                        }
                        </div> *@

                         @* <div class="row">
                            <div class="col-5" >
                                <input type="text" class="form-control" id="mpVideoLinkLabel2" placeholder="Link Name" disabled value="Url" >
                            </div>
                            <div class="col-5" >
                                <input type="text" class="form-control" id="mpVideoLink2" placeholder="Link URL" @bind="@idea.Url" >
                            </div>
                            <div class="col-2" >
                                <button type="button" class="btn" style="background-color:#A30606;color:#FFFFFF;" >+</button>
                            </div> 
                        </div> *@
                        
                        @* <div>
                            @foreach (var newUrl in newLinks)
                            {
                                <div class="row">
                                    <div class="col-5">
                                        <input type="text" class="form-control" placeholder="Link Name" @bind="@idea.Url" @oninput="(ChangeEventArgs e) => UpdateLink(e, newUrl)">
                                    </div>
                                    <div class="col-5">
                                        <input type="text" class="form-control" placeholder="Link URL" @bind="idea.Url">
                                    </div>
                                    <div class="col-2">
                                        <button @onclick="() => RemoveLink(newUrl)" class="btn" style="background-color:#A30606;color:#FFFFFF;">-</button>
                                    </div>
                                </div>
                            }
                            <button @onclick="() => RemoveLink(newUrl)" class="btn btn-success">-</button>
                        </div> 


                    @* <div class="row">
						<div class="col-5" >
							<input type="text" class="form-control" id="mpVideoLinkLabel" disabled value="Video Link" >
						</div>
						<div class="col-5" >
							<input type="text" class="form-control" id="mpVideoLink" placeholder="Link URL" @bind="@idea.VideoLink">
						</div>
						<div class="col-2" >
							<button type="button" class="btn" style="background-color:#A30606;color:#FFFFFF;" >-</button>
						</div>
					</div>
                    <br>
                    <div class="row">
						<div class="col-5" >
							<input type="text" class="form-control" id="mpVideoLinkLabel2" placeholder="Link Name" disabled value="GitHub" >
						</div>
						<div class="col-5" >
							<input type="text" class="form-control" id="mpVideoLink2" placeholder="Link URL" @bind="@idea.Github" >
						</div>
						<div class="col-2" >
							<button type="button" class="btn" style="background-color:#A30606;color:#FFFFFF;" >+</button>
						</div> 
					</div>
                    <br>
                    <div class="row">
						<div class="col-5" >
							<input type="text" class="form-control" id="mpVideoLinkLabel2" placeholder="Link Name" disabled value="Url" >
						</div>
						<div class="col-5" >
							<input type="text" class="form-control" id="mpVideoLink2" placeholder="Link URL" @bind="@idea.Url" >
						</div>
						<div class="col-2" >
							<button type="button" class="btn" style="background-color:#A30606;color:#FFFFFF;" >+</button>
						</div> 
					</div> 
				 *@
                

                
                
                </div>

			</div>
			<div class="row">
				<div class="col-8" >
                    <br><br>
                    @foreach (CompletedProjectDocumentation proj in idea.CompletedDocuments)
                    {
                        <input type="checkbox" class="form-check-input" id="selectAll" @onclick="ToggleSelectAll" checked="@selectAllChecked">
			            <label class="form-check-label" for="selectAll"><h5>Attachments for Team: @proj.TeamName</h5></label>
                        <br>
                        
                        @* <input type="checkbox" class="form-check-input" id="doc1" checked="@selectAllChecked">
                        <label class="form-check-label" for="doc1"><a href="/download/@proj.ProjectPlanLink" download="@proj.ProjectPlan" target="_top" style="color: #A30606; font-weight: bold;">Project Plan</a></label><br> *@
                        
                        
                        <input type="checkbox" class="form-check-input" @bind="isDoc1Selected">
                        <label class="form-check-label" for="doc1"><a href="/download/@proj.ProjectPlanLink" download="@proj.ProjectPlan" target="_top" style="color: #A30606; font-weight: bold;">Project Plan</a></label><br>
                        
                        
                        <input type="checkbox" class="form-check-input" id="doc2" checked="@selectAllChecked">
                        <label class="form-check-label" for="doc2" ><a href="/download/@proj.SRSLink" download="@proj.SRS" target="_top" style="color: #A30606; font-weight: bold;">Software Requirements Specification (SRS)</a></label><br>
                        <input type="checkbox" class="form-check-input" id="doc3" checked="@selectAllChecked">
                        <label class="form-check-label" for="doc3" ><a href="/download/@proj.TDDLink" download="@proj.TDD" target="_top" style="color: #A30606; font-weight: bold;">Technical Design Document (TDD)</a></label><br>
                        <input type="checkbox" class="form-check-input" id="doc4" checked="@selectAllChecked">
                        <label class="form-check-label" for="doc4" ><a href="/download/@proj.RunbookLink" download="@proj.Runbook" target="_top" style="color: #A30606; font-weight: bold;">Deployment and Operations Guide (Runbook)</a></label><br>
                        <input type="checkbox" class="form-check-input" id="doc5" checked="@selectAllChecked">
                        <label class="form-check-label" for="doc5" ><a href="/download/@proj.ProgrammersGuideLink" download="@proj.ProgrammersGuide" target="_top" style="color: #A30606; font-weight: bold;">Programmer Guide</a></label><br>
                        <input type="checkbox" class="form-check-input" id="doc6" checked="@selectAllChecked">
                        <label class="form-check-label" for="doc6" ><a href="/download/@proj.UsersGuideLink" download="@proj.UsersGuide" target="_top" style="color: #A30606; font-weight: bold;">User Guide</a></label><br>
                        <input type="checkbox" class="form-check-input" id="doc7" checked="@selectAllChecked">
                        <label class="form-check-label" for="doc7" ><a href="/download/@proj.TestReportLink" download="@proj.TestReport" target="_top" style="color: #A30606; font-weight: bold;">Test Report</a></label> 
                        <br><br> 
                    } 					
				</div>
				<div class="col-4" >
                    <br>
                    <br>
                    <div style="height:15em;background-color:#EEEEEE;border-radius: 25px;" @ondragover="OnDragOver" @ondrop="OnDrop">
                        <p style="text-align:center; padding-top:2em;">Drag and drop documents here</p>
                        <div style="text-align:center;">
                            @* <InputFile id="fileInput" class="file-input" OnChange="HandleSelectedFiles" multiple />
                            <label for="fileInput" class="file-input-button">Choose Files</label> *@
                            <InputFile class="btn btn-primary" id="attachment" draggable="true"
                     OnChange="LoadFiles" style="display:none;"
                     multiple accept=".doc,.docx,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,.ppt,.pptx,.pdf" />
                
                <label class="btn btn-primary" style = "background-color:#A30606;color:#FFFFFF;" for="attachment">Choose Files</label>

                    
                @if (uploadProgress > 0 )
                {
                    <div class="progress" style="margin-top: 10px; box-sizing: border-box;">
                        <div class="progress-bar progress-bar-striped progress-bar-animated"
                             role="progressbar"
                             aria-valuenow="@uploadProgress"
                             aria-valuemin="0"
                             aria-valuemax="100"
                             style="width: @uploadProgress%">
                            @uploadProgress%
                        </div>
                    </div>

                }
                        </div>
                        @* @if (selectedFiles.Count > 0)
                        {
                            <div style="text-align:center; padding-top: 1em;">
                                <p>Selected File(s):</p>
                                @foreach (var file in selectedFiles)
                                {
                                    <b>@file.Name</b>
                                }
                            </div>
                        } *@
                        
                    </div>

					<div style="text-align:center;" >
						@* <button type="button" class="btn" style="background-color:#A30606;color:#FFFFFF;" >Download Selected</button>  *@
                         @if(loadedFiles.Any())  
                        {      
                        <div style="margin-top: 10px;">
                            <div style="border: 1px solid #ccc; padding: 10px; border-radius: 5px; background-color:#CC3333;color:#FFF;text-align:center;">
                                Attached Files:
                                <ul style="list-style-type: none; padding: 0; margin: 0;">
                                    @foreach (var file in loadedFiles)
                                    {
                                        <li style="margin-bottom: 5px;">@file.Name
                                            <button class="btn btn-primary" style="margin-left: 10px;"  @onclick="() => RemoveFileByName(file.Name)">X</button>
                                        </li>
                                    }
                                </ul>
                            </div>
                        </div> 
                        }

                        
                        <button type="button" class="btn" style="background-color:#A30606;color:#FFFFFF;" @onclick="DownloadSelected">Download Selected</button>

						<button type="button" class="btn" style="background-color:#FDBF38;color:#000000;" >Delete Selected</button>
					</div>
				</div>
			</div>
			<br>

            <h5>Comments</h5>
            @if (Comments.Any())
            {
                foreach (var comment in Comments)
                {
                    <div>
                        <p>@comment.Text</p>
                        <small>@comment.Timestamp.ToString("g")</small>
                    </div>
                }
            }
            else
            {
                <p>This project has no comments</p>
            }

            <label for="mpComment">Comment</label>
            <textarea class="form-control" id="mpComment" @bind="NewCommentText"></textarea>
            <br>
            <button type="button" class="btn" style="background-color:#A30606;color:#FFFFFF;" @onclick="AddComment" value="@idea.Comments">Add Comment</button>

			




            <br><br>
			<h5>Actions</h5>
			<br>
             <button type="button" class="btn btn-success" style="margin-right: 10px;" @onclick="ApproveIdea">Approve</button>
             <ConfirmationDialogBox Command="Update"
                               Prompt="Confirm Changes?"
                               ButtonClass="btn btn-warning"
                               ConfirmedChanged="UpdateInfo" />

            <button type="button" class="btn btn-warning" style="margin-right: 10px;" @onclick="ExportIdea">Export</button>
            <ConfirmationDialogBox Command="Delete"
                               Prompt="Are you sure you want to delete this entry?"
                               ButtonClass="btn btn-danger"
                               ConfirmedChanged="DeleteIdea" />
        <br>
        <br>
        <br>
        <br>
        <br>
    </table> 
    <br>
    <br>
    <br>
    <br>
    <br>
    <br>
    <hr />
    <hr />         
}

@code {

    [Parameter]
    public string ProjectID { get; set; } 

    IEnumerable<ProjectInformation> sortedProjects;
    public bool IsDirty { get; set; } = false;    

    private void SetCompletedProjectsList()
    {
        Guid parsedProjectId;
        bool isValidGuid = Guid.TryParse(ProjectID, out parsedProjectId);

        if (!isValidGuid)
        {
            sortedProjects = Enumerable.Empty<ProjectInformation>();
            return;
        }

        List<ProjectInformation> completedProjects = new List<ProjectInformation>();
        foreach (ProjectInformation projectInformation in ProjectManager.ProjectIdeas.Values)
        {
            if (projectInformation.ProjectID == parsedProjectId)
            {
                completedProjects.Add(projectInformation);

                _infoPlaceholder = new ProjectInformation();
                _infoPlaceholder.VideoLink = projectInformation.VideoLink;
                _infoPlaceholder.ProjectTitle = projectInformation.ProjectTitle;
                _infoPlaceholder.ProjectDescription = projectInformation.ProjectDescription;
                _infoPlaceholder.TeamMember = projectInformation.TeamMember;
                _infoPlaceholder.LinkName = projectInformation.LinkName;
                _infoPlaceholder.Url = projectInformation.Url;
                _infoPlaceholder.Github = projectInformation.Github;
                _infoPlaceholder.FirstName = projectInformation.FirstName;
                _infoPlaceholder.LastName = projectInformation.LastName;
                _infoPlaceholder.Email = projectInformation.Email;
                _infoPlaceholder.Phone = projectInformation.Phone;
                _infoPlaceholder.SponsorFirstName = projectInformation.SponsorFirstName;
                _infoPlaceholder.SponsorLastName = projectInformation.SponsorLastName;
                _infoPlaceholder.SponsorEmail = projectInformation.SponsorEmail;
                _infoPlaceholder.SponsorPhone = projectInformation.SponsorPhone;
                _infoPlaceholder.teamMembersInfo = projectInformation.teamMembersInfo;

            }
        }
        sortedProjects = completedProjects;
    }

    private ProjectInformation _infoPlaceholder;


    private void MarkAsDirty(ProjectInformation project)
    {
        project.IsDirty = true;
    }

    public string GetVideoEmbedUrl(string videoLink)
    {
        if (string.IsNullOrWhiteSpace(videoLink))
        {
            return null; 
        }

        try 
        {
            var uri = new Uri(videoLink);
            var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
            var videoId = query["v"].ToString();
            return $"https://www.youtube.com/embed/{videoId}";
        }
        catch
        {
            return null; 
        }
    }

    private bool selectAllChecked = false;

    private void ToggleSelectAll()
    {
        selectAllChecked = !selectAllChecked;
    }


    public void UpdateProject(ProjectInformation updatedProject)
    {
        if (ProjectManager.ProjectIdeas.TryGetValue(updatedProject.ProjectID, out ProjectInformation project))
        {
            project.FirstName = updatedProject.FirstName;
            StateHasChanged();
        }
    }

    private void OnDragOver(DragEventArgs e)
    {

    }

    private void OnDrop(DragEventArgs e)
    {
        // Handle the drop event. Note that you might not be able to access the dropped files here directly in Blazor. This event is mainly for UI feedback, like changing the drop area's appearance.
    }


    private List<IBrowserFile> selectedFiles = new List<IBrowserFile>();

    private void HandleSelectedFiles(InputFileChangeEventArgs e)
    {
        selectedFiles.Clear();
        foreach (var file in e.GetMultipleFiles())
        {
            selectedFiles.Add(file);
        }
        StateHasChanged(); 
    }

    private ProjectInformation idea = new ProjectInformation();

    public enum FormButtons
    {
        Submit,
        Approver
    }

    public static bool IsUploading
    {
        get
        {
            return isUploading;
        }
    }

    [Parameter]
    public bool ShowFileAttachments { get; set; } = false;

    [Parameter]
    public bool ShowComments { get; set; } = false;

    [Parameter]
    public FormButtons ShowFormButton { get; set; } = FormButtons.Submit;

    [Parameter]
    public IIdea Parent { get; set; } = null;

    [Parameter]
    public ProjectInformation ProjectIdea
    {
        get
        {
            return idea;
        }
        set
        {
            idea = value;
        }
    }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private string DownloadFileName => $"{idea.ProjectTitle}-Export.pdf";

    private string Error { get; set; }

    private List<IProjectFile> loadedFiles = new();

    private static bool isUploading = false;

    private string tableState = "block";

    private string waitBar => tableState.Equals("none") ? "visible" : "hidden" ;

    protected override void OnInitialized()
    {
        SetCompletedProjectsList();
        base.OnInitialized();

        if (this.ShowFormButton == FormButtons.Approver)
        {
            this.idea.IsDirty = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        string link = "";
        if (!idea.Url.StartsWith("http://") && !idea.Url.StartsWith("https://") && idea.Url.Length != 0)
        {
            link = "https://" + idea.Url;
            idea.Url = link;
        }

        if (!idea.Github.StartsWith("http://") && !idea.Github.StartsWith("https://") && idea.Github.Length != 0)
        {
            link = "https://" + idea.Github;
            idea.Github = link;
        }

        if (!idea.VideoLink.StartsWith("http://") && !idea.VideoLink.StartsWith("https://") && idea.VideoLink.Length != 0)
        {
            link = "https://" + idea.VideoLink;
            idea.VideoLink = link;
        }

        idea.TeamMember = initialValue + " , " + string.Join(", ", teamMembers.Where(tm => !string.IsNullOrWhiteSpace(tm)));

        idea.LinkName = initialValueLinkName + " , "+ string.Join(", ", links.Where(tm => !string.IsNullOrWhiteSpace(tm))); 

        idea.Url = initialValueUrl + " , " + string.Join(", ", linkUrl.Where(tm => !string.IsNullOrWhiteSpace(tm)));


        this.tableState = "none";

        await Task.Run( async () =>
        {
            var uploaded = await ProjectManager.AddAsync(idea);

            if (uploaded)
            {
                idea.IsDirty = false;
                teamMembers.Clear();
                loadedFiles.Clear();
                links.Clear();
                linkUrl.Clear();
                idea = new ProjectInformation();

            }

            await Task.Delay(2000);
        });

        this.tableState = "block";
    }

    @* private void LoadFiles(InputFileChangeEventArgs inputFile)
    {
        this.loadedFiles.Clear();
        foreach (var file in inputFile.GetMultipleFiles().Take(ProjectManager.MaxNumberOfFiles))
        {
            if (file.Size > ProjectManager.MaxMBSizePerFile)
            {
                continue;
            }

            var projectFile = new ProjectFile(file);

            this.loadedFiles.Add(projectFile);
        }

        idea.SetAttachments(loadedFiles);
    } *@

        private int uploadProgress = 0;


    private async void LoadFiles(InputFileChangeEventArgs inputFile)
    {
        var newFiles = inputFile.GetMultipleFiles()
            .Take(ProjectManager.MaxNumberOfFiles)
            .Where(file => file.Size <= ProjectManager.MaxMBSizePerFile)
            .Select(file => new ProjectFile(file));

        this.loadedFiles = this.loadedFiles.Concat(newFiles).ToList();

        @* this.loadedFiles = this.loadedFiles.Where(file => !ShouldRemoveFile(file)).ToList(); *@


        var totalFiles = loadedFiles.Count;
        var iterations = 10; 

        for (var i = 0; i < iterations; i++)
        {
            var progress = (int)(((float)i / (iterations - 1)) * 100);
            uploadProgress = progress;
            StateHasChanged();

            await Task.Delay(500); 
        }

        

        idea.SetAttachments(loadedFiles);
        


        uploadProgress = 0;
        await Task.Yield();
        StateHasChanged();

       

    }

     // Add this method to remove files based on their filenames
    private void RemoveFileByName(string fileName)
    {
        this.loadedFiles = this.loadedFiles.Where(file => file.Name != fileName).ToList();
        // Update attachments after removing the file
        idea.SetAttachments(loadedFiles);
    }

    private void SponsorCheckBox_Changed(EventArgs e)
    {
        this.idea.IsSponsor = !this.idea.IsSponsor;

        if (!this.idea.IsSponsor)
        {
            ResetSponsor();
        }
    }

    private void SponsorCheck(EventArgs e)
    {
        if (idea.IsSponsor)
        {
            idea.SponsorFirstName = idea.FirstName;
            idea.SponsorLastName = idea.LastName;
            idea.SponsorEmail = idea.Email;
            idea.SponsorPhone = idea.Phone;
        }
    }

    private void ResetSponsor()
    {
        idea.SponsorFirstName = string.Empty;
        idea.SponsorLastName = string.Empty;
        idea.SponsorEmail = string.Empty;
        idea.SponsorPhone = string.Empty;
    }

    private async Task UpdateInfo(bool confirmed)
    {

        if (!confirmed)
        {
            return;
        }

        bool anyUpdates = false;

        foreach (var updatedProject in sortedProjects)
        {
            //if (updatedProject.IsDirty)
            //{
                if (ProjectManager.ProjectIdeas.TryGetValue(updatedProject.ProjectID, out ProjectInformation existingProject))
                {
                    anyUpdates = true;
                    updatedProject.ProjectDescription = _infoPlaceholder.ProjectDescription;
                    updatedProject.ProjectTitle = _infoPlaceholder.ProjectTitle;
                    updatedProject.FirstName = _infoPlaceholder.FirstName;
                    updatedProject.LastName = _infoPlaceholder.LastName;
                    updatedProject.Email = _infoPlaceholder.Email;
                    updatedProject.Phone = _infoPlaceholder.Phone;
                    updatedProject.SponsorFirstName = _infoPlaceholder.SponsorFirstName;
                    updatedProject.SponsorLastName = _infoPlaceholder.SponsorLastName;
                    updatedProject.SponsorEmail = _infoPlaceholder.SponsorEmail;
                    updatedProject.SponsorPhone = _infoPlaceholder.SponsorPhone;
                    updatedProject.Github = _infoPlaceholder.Github;
                    updatedProject.VideoLink = _infoPlaceholder.VideoLink;
                    updatedProject.SetMembers(teamMembers);
                    updatedProject.SetLinks(newLinks);


                    updatedProject.IsDirty = false; 
                }
            //}
        }
        if (anyUpdates)
        {
            ProjectManager.NotifyProjectIdeasChanged();
        }
        StateHasChanged(); 
    }

    private async Task UpdateRecordAsync(EventArgs e, ProjectInformation approvedProject)
    {
        if (!approvedProject.IsDirty)
        {
            return;
        }

        approvedProject.IsDirty = !await ProjectManager.UpdateAsync(approvedProject);
    }



    private async Task ApproveIdea(MouseEventArgs e)
    {
        foreach (var updatedProject in sortedProjects)
        {
            if (ProjectManager.ProjectIdeas.TryGetValue(updatedProject.ProjectID, out ProjectInformation existingProject))
            {

                updatedProject.Status = "Approved";

                await UpdateRecordAsync(e, updatedProject);
            }
        }

    }

    private async Task ExportIdea(MouseEventArgs e)
    {
        foreach (var updatedProject in sortedProjects)
        {
                if (ProjectManager.ProjectIdeas.TryGetValue(updatedProject.ProjectID, out ProjectInformation existingProject))
                {

                    var location = await this.ProjectManager.ExportAsync(updatedProject);

                    NavigationManager.NavigateTo($"{ProjectManager.FileManager.DownloadPath}{location}", true);

                }
        }


        @* this.CloseForm(EventArgs.Empty); *@
    }

    private async Task DeleteIdea(bool confirmed)
    {

        if (!confirmed)
        {
            return;
        }

        foreach (var updatedProject in sortedProjects)
        {
            if (ProjectManager.ProjectIdeas.TryGetValue(updatedProject.ProjectID, out ProjectInformation existingProject))
            {
                var authState = await authenticationState;
                string error = await this.ProjectManager.DeleteAsync(updatedProject, authState.User);

                if (string.IsNullOrEmpty(error))
                {
                    @* this.CloseForm(EventArgs.Empty); *@
                }
                else
                {
                    this.Error = error;
                }

            }
        }
        
    }

    private void DownloadFile(IProjectFile file)
    {
        NavigationManager.NavigateTo($"/download/{file.Location}", true);
    }

    private bool IsExpanded { get; set; } = false; 
    private void ToggleExpandCollapse()
    {
        IsExpanded = !IsExpanded;
    }

       // Define a list to store team members
    List<string> teamMembers = new List<string>();

    // Function to add a new team member input field
    private void AddTeamMember()
    {
        // Add an empty string to the list
        teamMembers.Add("");

    }
    String initialValue = "";
    private void setInitialTeamMemberValue(string value)
    {
        initialValue = value;
    }

    String initialValueLinkName = "";
    private void setInitialLinkNameValue(string value)
    {
        initialValueLinkName = value;
    }

    String initialValueUrl = "";
    private void setInitialUrlValue(string value)
    {
        initialValueUrl = value;
    }

    private void UpdateIdeaTeamMembers(int index, string value)
    {
        teamMembers[index] = value; // Update the teamMembers array

        // Update idea's TeamMembers property
     //   idea.TeamMember = initialValue + " , " + string.Join(", ", teamMembers.Where(tm => !string.IsNullOrWhiteSpace(tm)));
    }

   // Function to remove the last added team member input field
private void RemoveLastTeamMember()
{
    // Check if there are any team members in the list
    if (teamMembers.Count > 0)
    {
        // Remove the last added team member (which is at the end of the list)
        teamMembers.RemoveAt(teamMembers.Count - 1);

        // Update idea's TeamMembers property
       // idea.TeamMember = string.Join(", ", teamMembers.Where(tm => !string.IsNullOrWhiteSpace(tm)));
    }
}

    @* List<string> teamMembers = new List<string>();
    List<string> links = new List<string>();
    bool errorMessage = false;   

    //AddTeamMember limit set to 8
    private void AddTeamMember()
    {
        if (teamMembers.Count < 100)
        {
            teamMembers.Add("");
            errorMessage = false;
        }
        else
        {
            errorMessage = true;
        }
    }

    void UpdateTeamMember(ChangeEventArgs e, string member)
    {
        var index = teamMembers.IndexOf(member);
        if(index != -1)
        {
            teamMembers[index] = e.Value.ToString();
        }
    }

    void RemoveTeamMember(string member)
    {
        teamMembers.Remove(member);
    } *@

    @* // Function to add a new link input field
    private void AddLink()
    {
        links.Add("");
    }
    *@

    string NewCommentText { get; set; }
    List<Comment> Comments = new List<Comment>();

    void AddComment()
    {
        if (!string.IsNullOrWhiteSpace(NewCommentText))
        {
            var newComment = new Comment
            {
                Text = NewCommentText,
                Timestamp = DateTime.Now
            };
            Comments.Add(newComment);
            NewCommentText = string.Empty; 
        }
    }

    public class Comment
    {
        public string Text { get; set; }
        public DateTime Timestamp { get; set; }
    }

    private string GenerateDownloadLinkForDoc1()
    {
        return "/download/document1.pdf";
    }

    private bool isDoc1Selected;

    private void DownloadSelected()
    {
        if (isDoc1Selected)
        {
            var downloadLink = GenerateDownloadLinkForDoc1();
            DownloadFile(downloadLink);
        }
    }

    private async Task DownloadFile(string url)
    {
        await JSRuntime.InvokeVoidAsync("downloadFile", url);
    }

    @* private string currentInput = "VideoLink";
    private List<string> inputs = new List<string> { "VideoLink", "Github", "Url" };

    private string currentInputLinks = "VideoLink";
    private List<string> inputSequence = new List<string> { "VideoLink", "Github", "Url" };

    private void NextInput()
    {
        int currentIndex = inputSequence.IndexOf(currentInputLinks);
        int nextIndex = (currentIndex + 1) % inputSequence.Count; // Use modulo to cycle back to 0
        currentInputLinks = inputSequence[nextIndex];
    }  *@

    //private List<LinkInputModel> linkInputs = new();
    private List<string> LinkInputModel = new List<string>();

    @* private void AddInput()
    {
        // Add two new instances of LinkInputModel to the list
        linkInputs.Add(new LinkInputModel());
        linkInputs.Add(new LinkInputModel());
    }

    private void RemoveInput(LinkInputModel linkInput)
    {
        // Remove the specified LinkInputModel instance from the list
        if (linkInputs.Count > 1) // Prevent removing all input fields
        {
            linkInputs.Remove(linkInput);
        }
    }
    *@


    @* List<string> newLinks = new List<string>();
    bool displayErrorMessage = false;

    private void AddNewLink()
    {
        if (newLinks.Count < 100)
        {
            newLinks.Add("");
            displayErrorMessage = false;
        }
        else
        {
            displayErrorMessage = true;
        }
    }

    void RemoveLink(int index)
    {
        if (index >= 0 && index < newLinks.Count)
        {
            newLinks.RemoveAt(index);
        }
    } *@

    List<string> links = new List<string>();
    // Function to add a new link input field
    private void AddLink()
    {
        // Add an empty string to the list
        links.Add("");
    }

     private void UpdateIdeaLinkName(int index, string value)
    {
        links[index] = value; // Update the teamMembers array

        // Update idea's TeamMembers property
        @* idea.LinkName = string.Join(", ", links.Where(tm => !string.IsNullOrWhiteSpace(tm))); *@
    } 

    List <string> linkUrl = new List<string>();
    private void AddUrlLink()
    {
        linkUrl.Add("");
    }

    public void AddLinkandUrl()
{
    // Add a new link and URL entry
    links.Add(""); // Add an empty string for the new link name
    linkUrl.Add(""); // Add an empty string for the new link URL
}

public void RemoveLinkandURL() 
{
    RemoveLastLink();
    RemoveLastUrlLink();
}



    private void UpdateIdeaUrl(int index, string value)
    {
        linkUrl[index] = value; // Update the teamMembers array

        // Update idea's TeamMembers property
        @* idea.Url = string.Join(", ", linkUrl.Where(tm => !string.IsNullOrWhiteSpace(tm))); *@
    } 


     // Function to remove the last added link input field
private void RemoveLastLink()
{
    // Check if there are any links in the list
    if (links.Count > 0)
    {
        // Remove the last added link (which is at the end of the list)
        links.RemoveAt(links.Count - 1);

        @* idea.LinkNames = string.Join(", ", links.Where(tm => !string.IsNullOrWhiteSpace(tm))); *@
    }
}

// Function to remove the last added URL link input field
private void RemoveLastUrlLink()
{
    // Check if there are any URL links in the list
    if (linkUrl.Count > 0)
    {
        // Remove the last added URL link (which is at the end of the list)
        linkUrl.RemoveAt(linkUrl.Count - 1);

        @* idea.Url = string.Join(", ", linkUrl.Where(tm => !string.IsNullOrWhiteSpace(tm))); *@
    }
}


} 


